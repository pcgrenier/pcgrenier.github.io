
<!DOCTYPE html>
<!--[if IEMobile 7 ]><html class="no-js iem7"><![endif]-->
<!--[if lt IE 9]><html class="no-js lte-ie8"><![endif]-->
<!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!--><html class="no-js" lang="en"><!--<![endif]-->
<head>
  <meta charset="utf-8">
  <title>NiFi.rocks</title>
  <meta name="author" content="">

<meta name="description" content="How tos, videos, tips and tricks for Apache Nifi.">
<meta name="keywords" content="Apache Nifi, Nifi, nifi, nifi rocks">
  <!-- http://t.co/dKP3o1e -->
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  
  <link rel="canonical" href="http://www.nifi.rocks/atom.xml">
  <link href="/favicon.png" rel="icon">
  <link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css">
  <link href="/atom.xml" rel="alternate" title="NiFi.rocks" type="application/atom+xml">
  <script src="/javascripts/modernizr-2.0.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
  <script>!window.jQuery && document.write(unescape('%3Cscript src="./javascripts/lib/jquery.min.js"%3E%3C/script%3E'))</script>
  <script src="/javascripts/octopress.js" type="text/javascript"></script>
  <!--Fonts from Google"s Web font directory at http://google.com/webfonts -->
<link href="//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">
<link href="//fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">
<link href='//fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
<link href='//fonts.googleapis.com/css?family=Fjalla+One' rel='stylesheet' type='text/css'>

  
  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-57621921-1']);
    _gaq.push(['_trackPageview']);

    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>


</head>

<body   class="collapse-sidebar sidebar-footer" >
  <header role="banner">
	<div class="header-title"><a href="/">NiFi.rocks</a></div>


	<br><div class="header-subtitle">Your home for everything Apache NiFi</div>

</header>
  <nav role="navigation">
  
<form action="https://www.google.com/search" method="get">
  <fieldset role="search">
    <input type="hidden" name="q" value="site:www.nifi.rocks" />
    <input class="search" type="text" name="q" results="0" placeholder="Search"/>
  </fieldset>
</form>
  
<ul class="main-navigation">
  <li><a href="/">Home</a></li>
  <li><a href="/archives">Archives</a></li>
  <li><a href="/about">About</a></li>
</ul>

</nav>
  <div id="main">
    <div id="content">
      <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NiFi.rocks]]></title>
  <link href="http://www.nifi.rocks/atom.xml" rel="self"/>
  <link href="http://www.nifi.rocks/"/>
  <updated>2016-02-17T01:04:31+00:00</updated>
  <id>http://www.nifi.rocks/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Developing a Custom Apache Nifi Controller Service]]></title>
    <link href="http://www.nifi.rocks/developing-a-custom-apache-nifi-controller-service/"/>
    
    <updated>2016-02-07T00:37:57+00:00</updated>
    <id>http://www.nifi.rocks/developing-a-custom-apache-nifi-controller-service</id>
    
    <content type="html"><![CDATA[<p>Controller services are shared between processors, other controller services and reporting tasks. Normally they provide access to a shared resource, such as a database or ssl context, or externally managed content. This post will cover the basics of a controller service through a simple example. This example will take a file path that contains one or more properties files, and provide a processor access to those properties. The full source is hosted on <a href="https://github.com/pcgrenier/nifi-examples/tree/sample-processor">Github</a>.</p>

<!-- more -->


<h2>Setup</h2>

<p>This project will use a more advanced maven structure than the simple one used in the <a href="http://www.nifi.rocks//developing-a-custom-apache-nifi-processor-json">developing a custom processor</a> post.  If you have looked at the processor post you&rsquo;ll see that most of the setup for services is very similar.</p>

<figure class='code'><figcaption><span>Apache Nifi Controller Servcie Folder Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./sample-bundle
</span><span class='line'>├── pom.xml
</span><span class='line'>├── sample-bundle-nar
</span><span class='line'>│   ├── pom.xml
</span><span class='line'>│   └── src
</span><span class='line'>├── sample-controller-service
</span><span class='line'>│   ├── pom.xml
</span><span class='line'>│   └── src
</span><span class='line'>├── sample-controller-service-api
</span><span class='line'>│   ├── pom.xml
</span><span class='line'>│   └── src
</span><span class='line'>├── sample-controller-service-api-nar
</span><span class='line'>│   ├── pom.xml
</span><span class='line'>│   └── src
</span><span class='line'>└── sample-processor
</span><span class='line'>    ├── pom.xml
</span><span class='line'>    └── src</span></code></pre></td></tr></table></div></figure>


<p>I won&rsquo;t go into details on the pom files but the general idea is that you want a seperate nar for the api interface and the service itself, this allows something much smaller to be used as a dependency in your other bundles. So the sample-bundle-nar will pull in the sample-processor and sample-controller-service packages. The sample-controller-service-api-nar will just pull in the sample-controller-service-api.</p>

<h2>The Controller Service API Interface</h2>

<figure class='code'><figcaption><span>Controller Service API</span><a href='https://github.com/pcgrenier/nifi-examples/blob/sample-processor/sample-controller-service-api/src/main/java/rocks/nifi/examples/PropertiesFileService.java'>PropertiesFileService.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PropertiesFileService</span> <span class="kd">extends</span> <span class="n">ControllerService</span><span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">getProperty</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is just a simple interface that extends nifi&rsquo;s ControllerService. We also provide the only entry point to processors, the getProperty function.  This is similar to the current services in Apache Nifi such as <a href="https://raw.githubusercontent.com/apache/nifi/master/nifi-nar-bundles/nifi-standard-services/nifi-dbcp-service-api/src/main/java/org/apache/nifi/dbcp/DBCPService.java">DBCPService.java</a> providing the getConnection() function.</p>

<h2>The Controller Service</h2>

<p>If you have read the <a href="http://www.nifi.rocks//developing-a-custom-apache-nifi-processor-json">developing a custom processor</a> post a lot of this will be review. Controller services provide the same interfaces for configuration and validation. The initialization method only differs in taking a ControllerServiceInitializationContext.</p>

<p>Just like with the processors, tags are useful for finding your controller services. The capability description annotation provides a simple explanation of what the controller service will provide.</p>

<figure class='code'><figcaption><span>Controller Service</span><a href='https://github.com/pcgrenier/nifi-examples/blob/sample-processor/sample-controller-service/src/main/java/rocks/nifi/examples/StandardPropertiesFileService.java'>StandardPropertiesFileService.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Tags</span><span class="o">({</span><span class="s">&quot;nifirocks&quot;</span><span class="o">,</span> <span class="s">&quot;properties&quot;</span><span class="o">})</span>
</span><span class='line'><span class="nd">@CapabilityDescription</span><span class="o">(</span><span class="s">&quot;Provides a controller service to manage property files.&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StandardPropertiesFileService</span> <span class="kd">extends</span> <span class="n">AbstractControllerService</span> <span class="kd">implements</span> <span class="n">PropertiesFileService</span><span class="o">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we create the property descriptors. One will take the file or directory holding the property files, the other will be how often to check. Unlike processors controller services do not contain relationships.</p>

<figure class='code'><figcaption><span>Controller Service</span><a href='https://github.com/pcgrenier/nifi-examples/blob/sample-processor/sample-controller-service/src/main/java/rocks/nifi/examples/StandardPropertiesFileService.java'>StandardPropertiesFileService.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">PropertyDescriptor</span> <span class="n">CONFIG_URI</span> <span class="o">=</span> <span class="k">new</span>   <span class="n">PropertyDescriptor</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;Configuration Directory&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">description</span><span class="o">(</span><span class="s">&quot;Configuration directory for properties files.&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">defaultValue</span><span class="o">(</span><span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">addValidator</span><span class="o">(</span><span class="n">StandardValidators</span><span class="o">.</span><span class="na">NON_EMPTY_VALIDATOR</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">PropertyDescriptor</span> <span class="n">RELOAD_INTERVAL</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PropertyDescriptor</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;Reload Interval&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">description</span><span class="o">(</span><span class="s">&quot;Time before looking for changes&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">defaultValue</span><span class="o">(</span><span class="s">&quot;60 min&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">required</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">addValidator</span><span class="o">(</span><span class="n">StandardValidators</span><span class="o">.</span><span class="na">TIME_PERIOD_VALIDATOR</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PropertyDescriptor</span><span class="o">&gt;</span> <span class="n">serviceProperties</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">static</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PropertyDescriptor</span><span class="o">&gt;</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">CONFIG_URI</span><span class="o">);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">RELOAD_INTERVAL</span><span class="o">);</span>
</span><span class='line'>    <span class="n">serviceProperties</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">(</span><span class="n">props</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next step is the onConfigured function which will read the properties set and call any other necessary functions needed to start the service.  We just read the two properties we have, configUri and reloadIntervalMilli, and then call loadPropertiesFile().  After the properties file is loaded, we start up a file watcher and executer so that the properties can be dynamic and not just read in at startup.</p>

<figure class='code'><figcaption><span>Conroller Service</span><a href='https://github.com/pcgrenier/nifi-examples/blob/sample-processor/sample-controller-service/src/main/java/rocks/nifi/examples/StandardPropertiesFileService.java'>StandardPropertiesFileService.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@OnEnabled</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onConfigured</span><span class="o">(</span><span class="kd">final</span> <span class="n">ConfigurationContext</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InitializationException</span><span class="o">{</span>
</span><span class='line'>    <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Starting properties file service&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">configUri</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">CONFIG_URI</span><span class="o">).</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>    <span class="n">reloadIntervalMilli</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">RELOAD_INTERVAL</span><span class="o">).</span><span class="na">asTimePeriod</span><span class="o">(</span><span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initialize the properties</span>
</span><span class='line'>    <span class="n">loadPropertiesFiles</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fileWatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SynchronousFileWatcher</span><span class="o">(</span><span class="n">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">configUri</span><span class="o">),</span> <span class="k">new</span> <span class="nf">LastModifiedMonitor</span><span class="o">());</span>
</span><span class='line'>    <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadScheduledExecutor</span><span class="o">();</span>
</span><span class='line'>    <span class="n">FilesWatcherWorker</span> <span class="n">reloadTask</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FilesWatcherWorker</span><span class="o">();</span>
</span><span class='line'>    <span class="n">executor</span><span class="o">.</span><span class="na">scheduleWithFixedDelay</span><span class="o">(</span><span class="n">reloadTask</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">reloadIntervalMilli</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To see the other private functions you can refer to the github code.</p>

<p>The last step in the process is to create a processor to use the service.  This is exactly the same as creating a normal processor, but in this instance we want to add some specifics to use the PropertiesFileService.  To do this, we just grab a reference from context of the Controller Service, and then call the getProperty(propertyName) function.  We are just going to get the property and add it to the nifi flowfile properties so it is available to other processors down the line for now.  To specify which property we want we will add a PropertyDescriptor so that the user can set it in the Nifi UI, and another PropertyDescriptor to specify which PropertiesFileService to get the property value from.</p>

<figure class='code'><figcaption><span>Controll Service Processor</span><a href='https://github.com/pcgrenier/nifi-examples/blob/sample-processor/sample-processor/src/main/java/rocks/nifi/examples/processors/ControllerServiceProcessor.java'>ControllerServiceProcessor.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">PropertyDescriptor</span> <span class="n">PROPERTY_NAME</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PropertyDescriptor</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;Property Name&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">required</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">addValidator</span><span class="o">(</span><span class="n">StandardValidators</span><span class="o">.</span><span class="na">NON_EMPTY_VALIDATOR</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">PropertyDescriptor</span> <span class="n">PROPERTIES_SERVICE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PropertyDescriptor</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;Properties Service&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">description</span><span class="o">(</span><span class="s">&quot;System properties loader&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">required</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">identifiesControllerService</span><span class="o">(</span><span class="n">PropertiesFileService</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">.......</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onTrigger</span><span class="o">(</span><span class="kd">final</span> <span class="n">ProcessContext</span> <span class="n">context</span><span class="o">,</span> <span class="kd">final</span> <span class="n">ProcessSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ProcessException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">ProcessorLog</span> <span class="n">log</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getLogger</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">AtomicReference</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicReference</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">String</span> <span class="n">propertyName</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">PROPERTY_NAME</span><span class="o">).</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">PropertiesFileService</span> <span class="n">propertiesService</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">PROPERTIES_SERVICE</span><span class="o">).</span><span class="na">asControllerService</span><span class="o">(</span><span class="n">PropertiesFileService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">String</span> <span class="n">property</span> <span class="o">=</span> <span class="n">propertiesService</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">propertyName</span><span class="o">);</span>
</span><span class='line'>    <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Property = &quot;</span> <span class="o">+</span> <span class="n">property</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">FlowFile</span> <span class="n">flowfile</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// Write the results to an attribute</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">property</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">property</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
</span><span class='line'>        <span class="n">flowfile</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">putAttribute</span><span class="o">(</span><span class="n">flowfile</span><span class="o">,</span> <span class="s">&quot;property&quot;</span><span class="o">,</span> <span class="n">property</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">session</span><span class="o">.</span><span class="na">transfer</span><span class="o">(</span><span class="n">flowfile</span><span class="o">,</span> <span class="n">SUCCESS</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you have the actual service and processor written, if you have followed the directory setup in the source code, you are good to go!  Just build your service project(mvn clean install), from the root pom.xml directory.  Then copy the nar, from the sample-bundle-nar/target/ directory, into your Apache Nifi instance lib directory, .  Once copied, start/restart Apache Nifi and you now have your service available as usual to be used!</p>

<h2>Configuring the Service</h2>

<p>Once you have deployed the service nar bundle, go to the Controller Settings in the upper right of the web gui.</p>

<p><img src="http://www.nifi.rocks/images/nifi-controller-settings.png"></p>

<p>Then search or select the Controller Services tab and click the &lsquo;+&rsquo; button on the upper right of the model.  You can either search for the StandardPropertiesFileService, or just select it since there aren&rsquo;t many services.  From there configure the service as needed.</p>

<p><img src="http://www.nifi.rocks/images/controller-service.png"></p>

<p>Once the service is configured, add the ControllerServiceProcessor to the flow and configure the PropertyName and PropertyService, the name of the property that you want from the Java properties file and the PropertiesService that you just setup.</p>

<p><img src="http://www.nifi.rocks/images/controller-processor.png"></p>

<p>And that is pretty much it for configuring and setting up a service for use in a flow.  Now you just use the Flow file attribute as you would any other attribute.  This could be extended to grab multiple properties, maybe all of the from a file, and set them as Flow file attributes.  This is just a basic example showing how you can create a controller service that fits your needs.</p>

<p>If you have any questions about custom services, let us know below or at info@nifi.rocks!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Apache Nifi Release 0.4.0 highlights]]></title>
    <link href="http://www.nifi.rocks/apache-nifi-release-0-dot-4-0-highlights/"/>
    
    <updated>2015-12-15T03:00:56+00:00</updated>
    <id>http://www.nifi.rocks/apache-nifi-release-0-dot-4-0-highlights</id>
    
    <content type="html"><![CDATA[<p>Apache Nifi kicked out thier second release since graduating this past Friday.  With the release of 0.4.0, they are one step closer to a 1.0.0 release which will contain some very interesting things.  While we look forward to the first big release of Apache Nifi, lets break down the changes in the current build.  As always, release 0.4.0 is available on <a href="https://nifi.apache.org/download.html">Apache Nifi&rsquo;s download page</a>.</p>

<ul>
<li><a href="#bugfixes">Bug Fixes</a>:           93</li>
<li><a href="#improvements">Improvements</a>:    44</li>
<li><a href="#new-features">New Features</a>:    13</li>
</ul>


<p>The release notes are available on <a href="https://cwiki.apache.org/confluence/display/NIFI/Release+Notes#ReleaseNotes-Version0.4.0">Nifi&rsquo;s confluence page</a> and a quick highlight can be found below.  First lets just say, this is the biggest release so far, with almost double the amount of bug fixes, and over double the amount of improvements and new features!</p>

<ul>
<li>General UI improvements to usability</li>
<li>Multiple Authentication Mechanisms</li>
<li>New Provenance event types and ability to searh provenance events</li>
<li>Idle CPU usage was reduced</li>
<li><a href="#newprocessors">New Processors!</a></li>
<li>Improved OS support</li>
</ul>


<!--more-->


<h3><a name="bugfixes"></a>Bug Fixes</h3>

<p>Bug fixes, bug fixes everywhere!  So many bug fixes that it&rsquo;s almost impossible to list them all here.  Some of the big ones include fixing quite a few issues with MergeContent (efficiencies with 10,000+ files, queue swapping and an issue with delimiters), improved S3 support with PutS3 and FetchS3 fixes (now works with java 8, logs the URL correctly, corrected provenance evnet) and HDFS now acts accordingly with failures (passes to failure relationship and acts as expected for permission failures).  There were also fixes with the database connection pooling and with the PutSQL supporting multiple data types and booleans.  ConvertJSONToSQL also had quite a few fixes including caching results and metadata.  For the full list, either fire up nifi and check it out or look at the release notes!</p>

<h3><a name="improvements"></a>Improvements</h3>

<p>There are a few new provenance events with this release, including download event, fetch event, and REMOTE_INVOCATION event.  ExecuteSQL can now be run periodically without an input FlowFile allowing for expanded use of SQL tasks.  InvokeHTTP has been improved, it now has unique ids across clusters and has additional unit tests. The management side of nifi has been refactored slightly, mainly to clean up the shell scripts and fix some whitespace bugs.  SSL support has been added to the PutS3 processor. It&rsquo;s good to see improvements in so many different areas of nifi!</p>

<h3><a name="new-features"></a>New Features</h3>

<p>The 13 new features include a few <a name="newprocessors"></a>new processors:</p>

<ul>
<li>AttributesToJSON</li>
<li>DeleteS3Object</li>
<li>ExtractAvroMetadata</li>
<li>FetchFile</li>
<li>FetchSFTP</li>
<li>GetAzureEventHub</li>
<li>GetCouchbaseKey</li>
<li>GetHBase</li>
<li>ListenSyslog</li>
<li>ListFile</li>
<li>ListSFTP</li>
<li>ParseSyslog</li>
<li>PutAzureEventHub</li>
<li>PutCouchbaseKey</li>
<li>PutDistributedMapCache</li>
<li>PutHBaseCell</li>
<li>PutHBaseJSON</li>
<li>PutSyslog</li>
<li>RouteText</li>
<li>SplitAvro</li>
<li>TailFile</li>
</ul>


<p>To see more information about all Nifi Processors, checkout our full list of <a href="http://www.nifi.rocks/apache-nifi-processors/">nifi processors and their quick descriptions</a>.  You can also check <a href="https://nifi.apache.org/docs.html">Nifi&rsquo;s Documentation</a> for a little more information.  In addition to the new processors, Nifi now supports LDAP authentication ontop of username/password and two way SSL.  An enhancement to the UI now allows users to drop queued FLowFiles.  Before you had to stop the processor, add a new processor with a failure to discard the file and restart Nifi just to clear a queue!  Now it&rsquo;s much easier!</p>

<p>There is talks already about the first major release of Apache Nifi, 1.0.0 and redoing some of the decisions they made which would break backwords compatability.  We look forward to their next release which seems to be about every 6-8 weeks.  See you guys then!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Apache Nifi Release 0.3.0 highlights]]></title>
    <link href="http://www.nifi.rocks/apache-nifi-release-0-dot-3-0-highlights/"/>
    
    <updated>2015-09-29T01:17:47+00:00</updated>
    <id>http://www.nifi.rocks/apache-nifi-release-0-dot-3-0-highlights</id>
    
    <content type="html"><![CDATA[<p>Apache Nifi released their third release, <a href="https://nifi.apache.org/download.html">0.3.0</a> since graduating to a TLP.  It was a minor release but still included a descent number of changes.</p>

<ul>
<li><a href="#bugfixes">Bug Fixes</a>:           56</li>
<li><a href="#improvements">Improvements</a>:    20</li>
<li><a href="#newfeatures">New Features</a>:     5</li>
</ul>


<p>Release Highlights according to nifi can be found on their <a href="https://cwiki.apache.org/confluence/display/NIFI/Release+Notes#ReleaseNotes-Version0.3.0">confluence page</a>, but are also listed below.</p>

<ul>
<li>Performance improvements in handling large volumes of small files.</li>
<li>Performance improvements in Provenance repositories.</li>
<li>Added Reporting Task for ApacheTM AmbariTM.</li>
<li>Improved stability of nifi bootstrap.</li>
<li>Added Processors for working with images.</li>
<li>Support for interacting with Kerberos enabled Hadoop clusters</li>
<li>Added additional Avro capabilities - merging datafiles &amp; converting to json</li>
<li>Added processors for performing INSERT, UPDATE, DELETE statements against relational databases</li>
</ul>


<!--more-->


<h3><a name="bugfixes"></a>Bug Fixes</h3>

<p>The bug fixes in this version are plenty.  Quite a few were related to the management of a nifi instance, the starting and stopping and how the nifi.sh script works.  It&rsquo;s good to see that all parts of the code are getting worked on and not just the core nifi framework.  There were also quite a few fixes dealing with some of the current processors, most notably GetSFTP, GetFTP, GetKafka, GetTwitter, EncryptContent, ExecuteSQL, ExecuteFlumeSource, and the Nifi Spark Receiver.  Processor fixes are great since they are the major part of the flow!</p>

<h3><a name="improvements"></a>Improvements</h3>

<p>The 20 improvements is a gain substantial considering the quick turn around between release 0.2.1 and 0.3.0.  Documentation was updated which is always good, both the admin guide and user guide.</p>

<h3><a name="new-features"></a>New Features</h3>

<p>New features are always the exciting stuff that you&rsquo;ve been waiting for, and if you were waiting for Apache Flume support, this might just be the release for you!  The 5 new features are listed below:</p>

<ul>
<li>Add processors that can run Apache Flume sources/sinks</li>
<li>Create reporting task to deliver metrics to Apach Ambari</li>
<li>Add location bounding box filter to twitter processor</li>
<li>Create a NAR for handling images</li>
<li>Kerberos support for Hadoop processors</li>
</ul>


<p>As always, new features are warmly welcomed.  It&rsquo;s great to see the incorporation of more Apache projects into Apache Nifi processors, with both Flume and Ambari processors being included in this release.</p>

<p>The next release, 0.4.0, has 90 issues currently in <a href="https://issues.apache.org/jira/browse/NIFI/fixforversion/12333070/?selectedTab=com.atlassian.jira.jira-projects-plugin:version-issues-panel">Jira</a>.  I&rsquo;m not completely sure if Nifi has settled on firm release dates or not, but I imagine this one should be out in a month or two, if anything by the end of the year.</p>

<p>The full list of release notes can be found on <a href="https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12316020&amp;version=12329653">Apache Nifi&rsquo;s Jira</a>  This release is available through Nifi&rsquo;s site <a href="https://nifi.apache.org/download.html">download&rsquo;s section</a>, along with their previous releases.</p>

<p>We&rsquo;ve missed a few of Nifi&rsquo;s releases, 0.2.0-incubating and 0.2.1 since they graduated but hopefully will continue to give you a break down of Nifi releases as they come!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Apache Nifi Graduation]]></title>
    <link href="http://www.nifi.rocks/apache-nifi-graduation/"/>
    
    <updated>2015-09-29T01:17:11+00:00</updated>
    <id>http://www.nifi.rocks/apache-nifi-graduation</id>
    
    <content type="html"><![CDATA[<p>Apache Nifi graduated from a podling to a top level Apache Software Foundation project a few months ago, which is great news!  Congratulations to the NiFi team and all the contributors to making Apache Nifi great and meeting the requirements to move from an incubating project to a top level project.</p>

<!-- more -->


<h3>So&hellip;what does this mean?</h3>

<p>If you are not familiar with Apache, new projects are first accepted into the Apache incubator.  A list of these type of projects can be seen on <a href="http://incubator.apache.org/">Apache&rsquo;s Incubator Page</a>.  The move from a podling, a project that is in incubation, to a Top Level Project (TLP), means Nifi can be taken more seriously and now has Apache behind it.  It&rsquo;s not just some pet project where a guy decided to give out his source code; It is an Apache TLP, with the likes of Hadoop, Cassandra, etc.</p>

<p>So congratulations to Apache Nifi, looking forward to what will come next!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Developing a Custom Apache Nifi Processor-Unit Tests (Part I)]]></title>
    <link href="http://www.nifi.rocks/developing-a-custom-apache-nifi-processor-unit-tests-partI/"/>
    
    <updated>2015-04-04T16:54:52+00:00</updated>
    <id>http://www.nifi.rocks/developing-a-custom-apache-nifi-processor-unit-tests-partI</id>
    
    <content type="html"><![CDATA[<p>The Apache Nifi framework has built in unit testing with Junit using test runners.  They have a few examples in their code base, but learning first hand really helps.  In this post we&rsquo;ll go over adding unit tests to the <a href="http://www.nifi.rocks/developing-a-custom-apache-nifi-processor-json/">JSON Processor</a> that we developed previously.</p>

<p>To start, we&rsquo;ll checkout the JSON Processor code from <a href="https://github.com/pcgrenier/nifi-examples">Github</a> and then open it up in your favorite text editor.  There is already a test package/folder in the project that contains a unit test, <a href="https://github.com/pcgrenier/nifi-examples/blob/master/src/test/java/rocks/nifi/examples/processors/JsonProcessorTest.java">rocks.nifi.examples.processors/JsonProcessorTest.java</a>.</p>

<p>When unit testing in Apache Nifi, there are a few items on top of the normal JUnit annotations that are required.  While you can unit test with just JUnit, using the built in method in Apache Nifi makes it much easier.  In a future post we&rsquo;ll show you how to unit test using Mockito and JUnit to test helper methods where actually invoking a full processor seems excessive, or if you just don&rsquo;t want to use Nifi&rsquo;s test runner.</p>

<!-- more -->


<p>The first thing to do to unit test Apache Nifi is grabbing the necessary dependencies from maven.</p>

<figure class='code'><figcaption><span>pom.xml</span><a href='https://github.com/pcgrenier/nifi-examples/blob/master/pom.xml#L42'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.apache.nifi<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>nifi-mock<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>${nifi.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After including the nifi-mock dependency, there will be a few includes from the org.apache.nifi.utils package that will be necessary to import; mainly TestRunner, TestRunners and MockFlowFile.</p>

<p>Since we are using JUnit, the usual tags apply for defining a test function inside the class and we&rsquo;ll use the @Test for this one, although the other annotations can be used.  After adding the JUnit tag, there are a few requirements that Nifi puts on you in order to utilize the test runners they have provided.  The first is to create a test runner to use and then to set a flow file or flow file content inorder to run the processor.  In this example, we are using a ByteArrayInputStream as the flow file content, although you could use a JSON file in a resource folder just as well.</p>

<p>Once a test runner is created, you can set flow file properties on it using <code>runner.setProperties(PropertyDescriptor)</code> method and can enqueue a file using <code>runner.enqueue(content)</code>.  Then you can run the test runner and make assertions.</p>

<p>Nifi makes it easy to test assertions with some built in assertions for flowfiles.  You can test the flowfile was transfered to the appropriate relationship and get the flowfile to test for expected attributes and content.</p>

<p>Below is how we test the JSON Processor, with a typical test setup for Apache Nifi.</p>

<figure class='code'><figcaption><span>JSON Processor Unit Test</span><a href='https://github.com/pcgrenier/nifi-examples/blob/master/src/test/java/rocks/nifi/examples/processors/JsonProcessorTest.java'>JsonProcessorTest.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@org.junit.Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testOnTrigger</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Content to be mock a json file</span>
</span><span class='line'>        <span class="n">InputStream</span> <span class="n">content</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ByteArrayInputStream</span><span class="o">(</span><span class="s">&quot;{\&quot;hello\&quot;:\&quot;nifi rocks\&quot;}&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Generate a test runner to mock a processor in a flow</span>
</span><span class='line'>        <span class="n">TestRunner</span> <span class="n">runner</span> <span class="o">=</span> <span class="n">TestRunners</span><span class="o">.</span><span class="na">newTestRunner</span><span class="o">(</span><span class="k">new</span> <span class="nf">JsonProcessor</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add properites</span>
</span><span class='line'>        <span class="n">runner</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="n">JsonProcessor</span><span class="o">.</span><span class="na">JSON_PATH</span><span class="o">,</span> <span class="s">&quot;$.hello&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add the content to the runner</span>
</span><span class='line'>        <span class="n">runner</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Run the enqueued content, it also takes an int = number of contents queued</span>
</span><span class='line'>        <span class="n">runner</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// All results were processed with out failure</span>
</span><span class='line'>        <span class="n">runner</span><span class="o">.</span><span class="na">assertQueueEmpty</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If you need to read or do aditional tests on results you can access the content</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">MockFlowFile</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">runner</span><span class="o">.</span><span class="na">getFlowFilesForRelationship</span><span class="o">(</span><span class="n">JsonProcessor</span><span class="o">.</span><span class="na">SUCCESS</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertTrue</span><span class="o">(</span><span class="s">&quot;1 match&quot;</span><span class="o">,</span> <span class="n">results</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MockFlowFile</span> <span class="n">result</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">resultValue</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">runner</span><span class="o">.</span><span class="na">getContentAsByteArray</span><span class="o">(</span><span class="n">result</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Match: &quot;</span> <span class="o">+</span> <span class="n">IOUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">runner</span><span class="o">.</span><span class="na">getContentAsByteArray</span><span class="o">(</span><span class="n">result</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Test attributes and content</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="na">assertAttributeEquals</span><span class="o">(</span><span class="n">JsonProcessor</span><span class="o">.</span><span class="na">MATCH_ATTR</span><span class="o">,</span> <span class="s">&quot;nifi rocks&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="na">assertContentEquals</span><span class="o">(</span><span class="s">&quot;nifi rocks&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Watch for our next post about unit testing Apache Nifi with Mockito and JUnit without using nifi&rsquo;s testrunner class.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Apache Nifi Release 0.0.2 Highlights]]></title>
    <link href="http://www.nifi.rocks/apache-nifi-release-0-dot-0-2-highlights/"/>
    
    <updated>2015-03-20T01:45:11+00:00</updated>
    <id>http://www.nifi.rocks/apache-nifi-release-0-dot-0-2-highlights</id>
    
    <content type="html"><![CDATA[<p>Apache Nifi just kicked out their second release, <a href="https://nifi.apache.org/download.html">0.0.2</a>.  It doesn&rsquo;t have too many new features in it, hence a patch release according to <a href="http://semver.org">semantic versioning</a>, but it is definitely an improvement over the previous version, with it&rsquo;s bug fixes, improvements, and new features numbers below.</p>

<ul>
<li><a href="#bugfixes">Bug Fixes</a>:       35</li>
<li><a href="#improvements">Improvements</a>:        17</li>
<li><a href="#new-features">New Features</a>:        5</li>
</ul>


<!--more-->


<h3><a name="bugfixes"></a>Bug Fixes</h3>

<p>The nifi community came in with some big fixes with this release.  The biggest ones I feel are the ability to now build on Mac OSX and increasing documentation.  There were quite a few other fixes that greatly improved the overall NiFi experience, processors now stop correctly and aren&rsquo;t continued to be scheduled and some clustering issues were resolved for example.</p>

<h3><a name="improvements"></a>Improvements</h3>

<p>The improvements in this release included a few maintanence related tasks and again some over all usability tasks, with most of them falling on the usability side.  The main improvements in Nifi release 0.0.2 were document related and overall usability updates, the cleanup of development documents, and too many to name for the usability.  In this release though, you should expect the following usability improvements:</p>

<ul>
<li>proxy support for the GetFTP Processor</li>
<li>Component toolbox improvements</li>
<li>Dragging/drawing relationships</li>
<li>Labeling with the same color for multiple items</li>
</ul>


<h3><a name="new-features"></a>New Features</h3>

<p>Now on to the good stuff, new features!  This release only had a few additional features added, but from what I&rsquo;ve read there are quite a few more coming.  The highlights in this category are:</p>

<p>Multiple new processors
* JSON Processors
* ExecuteProcess processor
* StoreInKiteDataset processor</p>

<p>New processors are great and mean more possibilities and use cases for Apache Nifi.  We showed you how to create a JSON processor in a previous post, <a href="http://www.nifi.rocks/developing-a-custom-apache-nifi-processor-json">Developing a custom Nifi Processor: JSON</a>, and now someone has contributed a JSON processor to Nifi.  For a full list of Nifi Processors, including the newly added ones, see our <a href="http://www.nifi.rocks/apache-nifi-processors">previous post</a>.</p>

<p>It has been rumored that the next release will contain quite a few changes and be a minor release bumping up to version 0.1.0.  With over 200 tickets open on their JIRA, Nifi could see a great amount of change in the coming months.</p>

<p>The full list of release notes can be found on Apache Nifi&rsquo;s <a href="https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12316020&amp;version=12329373">JIRA page</a> and downloads for all of their releases, source code and binaries, are available from their <a href="https://nifi.apache.org/download.html">website</a>.  Nifi is also making thier releases available through maven via apaches <a href="https://repository.apache.org/content/repositories/releases/org/apache/nifi/">maven repository</a>.</p>

<p>As always, check back for how-tos and Apache Nifi related updates.  New videos and posts are coming!!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Developing A Custom Apache Nifi Processor (JSON)]]></title>
    <link href="http://www.nifi.rocks/developing-a-custom-apache-nifi-processor-json/"/>
    
    <updated>2015-02-07T02:14:33+00:00</updated>
    <id>http://www.nifi.rocks/developing-a-custom-apache-nifi-processor-json</id>
    
    <content type="html"><![CDATA[<p>The list of available Apache Nifi processors is extensive, as documented in <a href="http://www.nifi.rocks/apache-nifi-processors/">this post</a>. There is still a need to develop your own; to pull data from a database, to process an uncommon file format, or many other unique situations. So to get you started, we will work through a basic processor that takes a json file as input and a json path as a parameter to place into the contents and an attribute. The full source is hosted on <a href="https://github.com/pcgrenier/nifi-examples">Github</a>.</p>

<!-- more -->


<h2>Setup</h2>

<p>Start by creating a simple maven project in your favorite IDE. Then edit the pom.xml.</p>

<div><script src='https://gist.github.com/f99d27d08c3903f9d50c.js?file=pom.xml'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;rocks.nifi&lt;/groupId&gt;
    &lt;artifactId&gt;examples&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;nar&lt;/packaging&gt;
    
    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;
        &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;
        &lt;nifi.version&gt;0.0.1-incubating&lt;/nifi.version&gt;
    &lt;/properties&gt;
    
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.nifi&lt;/groupId&gt;
            &lt;artifactId&gt;nifi-api&lt;/artifactId&gt;
            &lt;version&gt;${nifi.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.nifi&lt;/groupId&gt;
            &lt;artifactId&gt;nifi-utils&lt;/artifactId&gt;
            &lt;version&gt;${nifi.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.nifi&lt;/groupId&gt;
            &lt;artifactId&gt;nifi-processor-utils&lt;/artifactId&gt;
            &lt;version&gt;${nifi.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
            &lt;version&gt;1.3.2&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.jayway.jsonpath&lt;/groupId&gt;
            &lt;artifactId&gt;json-path&lt;/artifactId&gt;
            &lt;version&gt;1.2.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.nifi&lt;/groupId&gt;
            &lt;artifactId&gt;nifi-mock&lt;/artifactId&gt;
            &lt;version&gt;${nifi.version}&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.10&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.nifi&lt;/groupId&gt;
                &lt;artifactId&gt;nifi-nar-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;1.0.0-incubating&lt;/version&gt;
                &lt;extensions&gt;true&lt;/extensions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.15&lt;/version&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</code></pre></noscript></div>


<p>This pom.xml includes a single plug-in for building a nifi nar, which is similar to a war for nifi, that bundles everything up in a way nifi can unpack. The nifi-api is the only other &ldquo;required&rdquo; dependency. The other nifi dependencies are really use full as you will see.</p>

<p>The next important piece is telling nifi which classes to load and register. This is done in a single file located at /src/main/resources/META-INF/services/org.apache.nifi.processor.Processor</p>

<div><script src='https://gist.github.com/f98e563e787c1b73c425.js?file=org.apache.nifi.processor.Processor'></script>
<noscript><pre><code>rocks.nifi.examples.processors.JsonProcessor</code></pre></noscript></div>


<h2>The JSON Processor</h2>

<p>Now that everything is defined and findable by Apache Nifi, lets build a processor. Define a simple java class as defined in the setup process (rocks.nifi.examples.processors.JsonProcessor).</p>

<p>Tags are useful for finding your processor in the list of processors in the GUI. So in this case in the search box you could just type &lsquo;json&rsquo; and your processor will be found. The capability description is also displayed in the processor selection box. Nifi.rocks will make future posts on documenting your custom processors. Finally most processors will just extend the AbstractProcessor, for more complicated tasks it may be required to go a level deeper for the AbstractSessionFactoryProcessor.</p>

<figure class='code'><figcaption><span>Apache Nifi Processor Header </span><a href='https://github.com/pcgrenier/nifi-examples/blob/master/src/main/java/rocks/nifi/examples/processors/JsonProcessor.java'>JsonProcessor.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@SideEffectFree</span>
</span><span class='line'><span class="nd">@Tags</span><span class="o">({</span><span class="s">&quot;JSON&quot;</span><span class="o">,</span> <span class="s">&quot;NIFI ROCKS&quot;</span><span class="o">})</span>
</span><span class='line'><span class="nd">@CapabilityDescription</span><span class="o">(</span><span class="s">&quot;Fetch value from json path.&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonProcessor</span> <span class="kd">extends</span> <span class="n">AbstractProcessor</span> <span class="o">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not really interesting stuff here. Properties will hold all a list of all the available properties tha are exposed to the user. Relationships will hold the relationships the processor will use to direct the flow files. For more details on relationships, properties, and components of an Apache Nifi flow please read the <a href="https://nifi.apache.org/developer-guide.html">offical developer guide</a>. There is plenty of room to expand on custom validators, but there is a large selection of validators in nifi-processor-utils package.</p>

<figure class='code'><figcaption><span>Variable Declaration</span><a href='https://github.com/pcgrenier/nifi-examples/blob/master/src/main/java/rocks/nifi/examples/processors/JsonProcessor.java'>JsonProcessor.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PropertyDescriptor</span><span class="o">&gt;</span> <span class="n">properties</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Relationship</span><span class="o">&gt;</span> <span class="n">relationships</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">MATCH_ATTR</span> <span class="o">=</span> <span class="s">&quot;match&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">PropertyDescriptor</span> <span class="n">JSON_PATH</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PropertyDescriptor</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;Json Path&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">required</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">addValidator</span><span class="o">(</span><span class="n">StandardValidators</span><span class="o">.</span><span class="na">NON_EMPTY_VALIDATOR</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Relationship</span> <span class="n">SUCCESS</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Relationship</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;SUCCESS&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">description</span><span class="o">(</span><span class="s">&quot;Succes relationship&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>The init function is called at the start of Apache Nifi. Remember that this is a highly multi-threaded environment and be careful what you do in this space. This is why both the list of properties and the set of relationships are set with unmodifiable collections. I put the getters for the properties and relationships here as well.</p>

<figure class='code'><figcaption><span>Apache Nifi Init</span><a href='https://github.com/pcgrenier/nifi-examples/blob/master/src/main/java/rocks/nifi/examples/processors/JsonProcessor.java'>JsonProcessor.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="kd">final</span> <span class="n">ProcessorInitializationContext</span> <span class="n">context</span><span class="o">){</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">PropertyDescriptor</span><span class="o">&gt;</span> <span class="n">properties</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="n">properties</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">JSON_PATH</span><span class="o">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">properties</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">(</span><span class="n">properties</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Relationship</span><span class="o">&gt;</span> <span class="n">relationships</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="n">relationships</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">SUCCESS</span><span class="o">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">relationships</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableSet</span><span class="o">(</span><span class="n">relationships</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Relationship</span><span class="o">&gt;</span> <span class="nf">getRelationships</span><span class="o">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">relationships</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PropertyDescriptor</span><span class="o">&gt;</span> <span class="nf">getSupportedPropertyDescriptors</span><span class="o">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">properties</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The onTrigger method is called when ever a flow file is passed to the processor. For more details on the context and session variables please again refer to the <a href="https://nifi.apache.org/developer-guide.html#flowfile">official developer guide</a>.</p>

<figure class='code'><figcaption><span>Apache Nifi OnTrigger</span><a href='https://github.com/pcgrenier/nifi-examples/blob/master/src/main/java/rocks/nifi/examples/processors/JsonProcessor.java'>JsonProcessor.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onTrigger</span><span class="o">(</span><span class="n">ProcessContext</span> <span class="n">context</span><span class="o">,</span> <span class="n">ProcessSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ProcessException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">ProcessorLog</span> <span class="n">log</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getLogger</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">AtomicReference</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicReference</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">FlowFile</span> <span class="n">flowfile</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">session</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">flowfile</span><span class="o">,</span> <span class="k">new</span> <span class="nf">InputStreamCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">in</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span><span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">IOUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">JsonPath</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="s">&quot;$.hello&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">value</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">){</span>
</span><span class='line'>                <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Failed to read json string.&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Write the results to an attribute</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">results</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">results</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">results</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
</span><span class='line'>        <span class="n">flowfile</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">putAttribute</span><span class="o">(</span><span class="n">flowfile</span><span class="o">,</span> <span class="s">&quot;match&quot;</span><span class="o">,</span> <span class="n">results</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// To write the results back out ot flow file</span>
</span><span class='line'>    <span class="n">flowfile</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">flowfile</span><span class="o">,</span> <span class="k">new</span> <span class="nf">OutputStreamCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">OutputStream</span> <span class="n">out</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">session</span><span class="o">.</span><span class="na">transfer</span><span class="o">(</span><span class="n">flowfile</span><span class="o">,</span> <span class="n">SUCCESS</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In general you pull the flow file out of session. Read and write to the flow files and add attributes where needed. To work on flow files nifi provides 3 callback interfaces.</p>

<ul>
<li><p>InputStreamCallback: For reading the contents of the flow file through a input stream.</p>

<p>Using Apache Commons to read the input stream out to a string. Use JsonPath to attempt to read the json and set a value to the pass on. It would normally be best practice in the case of a exception to pass the original flow file to a Error relation point in the case of an exception.</p></li>
</ul>


<figure class='code'><figcaption><span>Apache Nifi InputStreamCallback</span><a href='https://github.com/pcgrenier/nifi-examples/blob/master/src/main/java/rocks/nifi/examples/processors/JsonProcessor.java'>JsonProcessor.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">session</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">flowfile</span><span class="o">,</span> <span class="k">new</span> <span class="nf">InputStreamCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">in</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span><span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">IOUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">JsonPath</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="s">&quot;$.hello&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">value</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">){</span>
</span><span class='line'>            <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Failed to read json string.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>OutputStreamCallback: For writing to a flowfile, this will over write not concatenate.</p>

<p>We simply write out the value we recieved in the InputStreamCallback</p></li>
</ul>


<figure class='code'><figcaption><span>Apache Nifi OutputStreamCallback</span><a href='https://github.com/pcgrenier/nifi-examples/blob/master/src/main/java/rocks/nifi/examples/processors/JsonProcessor.java'>JsonProcessor.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">flowfile</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">flowfile</span><span class="o">,</span> <span class="k">new</span> <span class="nf">OutputStreamCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">OutputStream</span> <span class="n">out</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>StreamCallback: This is for both reading and writing to the same flow file. With both the outputstreamcallback and streamcall back remember to assign it back to a flow file. This processor is not in use in the code and could have been. The choice was deliberate to show a way of moving data out of callbacks and back in.</li>
</ul>


<figure class='code'><figcaption><span>Apache Nifi StreamCallback </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">flowfile</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">flowfile</span><span class="o">,</span> <span class="k">new</span> <span class="nf">StreamCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">in</span><span class="o">,</span> <span class="n">OutputStream</span> <span class="n">out</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">IOUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">JsonPath</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="s">&quot;$.hello&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Flow files can also contain meta data in attributes to push between processors.</p>

<figure class='code'><figcaption><span>Setting low file attributes</span><a href='https://github.com/pcgrenier/nifi-examples/blob/master/src/main/java/rocks/nifi/examples/processors/JsonProcessor.java'>JsonProcessor.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Write the results to an attribute</span>
</span><span class='line'><span class="n">String</span> <span class="n">results</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">results</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">results</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
</span><span class='line'>    <span class="n">flowfile</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">putAttribute</span><span class="o">(</span><span class="n">flowfile</span><span class="o">,</span> <span class="s">&quot;match&quot;</span><span class="o">,</span> <span class="n">results</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally every flow file that is generated needs to be deleted or transfered.</p>

<figure class='code'><figcaption><span>Session Transfer</span><a href='https://github.com/pcgrenier/nifi-examples/blob/master/src/main/java/rocks/nifi/examples/processors/JsonProcessor.java'>JsonProcessor.java </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">session</span><span class="o">.</span><span class="na">transfer</span><span class="o">(</span><span class="n">flowfile</span><span class="o">,</span> <span class="n">SUCCESS</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point you should be able to build with a simple</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='shell-session'><span class='line'><span class="go">mvn clean install</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deployment</h2>

<ol>
<li>Copy the target/examples-1.0-SNAPSHOT.nar to $NIFI_HOME/lib</li>
<li>$NIFI_HOME/bin/nifi.sh stop</li>
<li>$NIFI_HOME/bin/nifi.sh start</li>
</ol>


<p>After Nifi finishes starting you should be able to add it to your flow.</p>

<p>Nifi.rocks will follow up with how to generate unit tests and documentation for your custom processors soon.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Apache Nifi: What Processors are there?]]></title>
    <link href="http://www.nifi.rocks/apache-nifi-processors/"/>
    
    <updated>2015-02-05T03:00:06+00:00</updated>
    <id>http://www.nifi.rocks/apache-nifi-processors</id>
    
    <content type="html"><![CDATA[<p><strong> Includes all processors through release 0.4.0 </strong></p>

<p>I looked around at what can be done with Apache NiFi and didn&rsquo;t notice a list of processors without looking at the code or building the project.  I think a list of available processors, the work horse of Apache Nifi, would greatly help decide if it is right for certain needs.  So, I went into the usage guide in the Apache Nifi UI and pulled a list of processors and a quick description for those who want to know what possibilities there are before getting into nifi itself!</p>

<h1>List of processors</h1>

<p>With new releases of Nifi, the number of processors have increased from the original 53 to 90!
Here is a list of all 90 processors, listed alphabetically, that are currently in Apache Nifi as of <strike>Ocotober 3rd, 2015</strike> December 18th, 2015.  Each one links to a description of the processor further down.  The Usage documentation available in the web ui has much more detail about each processor, it&rsquo;s properties, modifiable attributes, and relationships and each processor has it&rsquo;s own page in the UI, so here is just a quick overview.  Again, this content is taken directly from Nifi&rsquo;s Usage guide in their web UI and all credit/rights belong to them under the Apache 2.0 License.</p>

<p>Nifi has improved their documentation, which was originally only available when running apache nifi.  The documentation now is produced through the build process and has been added to <a href="https://nifi.apache.org/docs.html">their website</a>.  So if you need more information or more detail about each processor just check there.</p>

<!--more -->


<ul>
<li><a href="#AttributesToJSON">AttributesToJSON</a></li>
<li><a href="#Base64EncodeContent">Base64EncodeContent</a></li>
<li><a href="#CompressContent">CompressContent</a></li>
<li><a href="#ControlRate">ControlRate</a></li>
<li><a href="#ConvertAvroSchema">ConvertAvroSchema</a></li>
<li><a href="#ConvertAvroToJSON">ConvertAvroToJSON</a></li>
<li><a href="#ConvertCharacterSet">ConvertCharacterSet</a></li>
<li><a href="#ConvertCSVToAvro">ConvertCSVToAvro</a></li>
<li><a href="#ConvertJSONToAvro">ConvertJSONToAvro</a></li>
<li><a href="#ConvertCSVToSQL">ConvertCSVToSQL</a></li>
<li><a href="#CreateHadoopSequenceFile">CreateHadoopSequenceFile</a></li>
<li><a href="#DeleteS3Object">DeleteS3Object</a></li>
<li><a href="#DeleteSQS">DeleteSQS</a></li>
<li><a href="#DetectDuplicate">DetectDuplicate</a></li>
<li><a href="#DistributeLoad">DistributeLoad</a></li>
<li><a href="#DuplicateFlowFile">DuplicateFlowFile</a></li>
<li><a href="#EncryptContent">EncryptContent</a></li>
<li><a href="#EvaluateJSONPath">EvaluateJSONPath</a></li>
<li><a href="#EvaluateRegularExpression">EvaluateRegularExpression</a> DEPRECATED-Use <a href="#ExtractText">ExtractText</a></li>
<li><a href="#EvaluateXPath">EvaluateXPath</a></li>
<li><a href="#EvaluateXQuery">EvaluateXQuery</a></li>
<li><a href="#ExecuteFlumeSink">ExecuteFlumeSink</a></li>
<li><a href="#ExecuteFlumeSource">ExecuteFlumeSource</a></li>
<li><a href="#ExecuteProcess">ExecuteProcess</a></li>
<li><a href="#ExecuteSQL">ExecuteSQL</a></li>
<li><a href="#ExecuteStreamCommand">ExecuteStreamCommand</a></li>
<li><a href="#ExtractAvroMetadata">ExtractAvroMetadata</a></li>
<li><a href="#ExtractHL7Attributes">ExtractHL7Attributes</a></li>
<li><a href="#ExtractImageMetadata">ExtractImageMetadata</a></li>
<li><a href="#ExtractText">ExtractText</a></li>
<li><a href="#FetchFile">FetchFile</a></li>
<li><a href="#FetchHDFS">FetchHDFS</a></li>
<li><a href="#FetchS3Object">FetchS3Object</a></li>
<li><a href="#FetchSFTP">FetchSFTP</a></li>
<li><a href="#GenerateFlowFile">GenerateFlowFile</a></li>
<li><a href="#GeoEnrichIP">GeoEnrichIP</a></li>
<li><a href="#GetAzureEventHub">GetAzureEventHub</a></li>
<li><a href="#GetCouchbaseKey">GetCouchbaseKey</a></li>
<li><a href="#GetFile">GetFile</a></li>
<li><a href="#GetFTP">GetFTP</a></li>
<li><a href="#GetHBase">GetHBase</a></li>
<li><a href="#GetHDFS">GetHDFS</a></li>
<li><a href="#GetHDFSSequenceFile">GetHDFSSequenceFile</a></li>
<li><a href="#GetHTTP">GetHTTP</a></li>
<li><a href="#GetJMSQueue">GetJMSQueue</a></li>
<li><a href="#GetJMSTopic">GetJMSTopic</a></li>
<li><a href="#GetKafka">GetKafka</a></li>
<li><a href="#GetMongo">GetMongo</a></li>
<li><a href="#GetSFTP">GetSFTP</a></li>
<li><a href="#GetSolr">GetSolr</a></li>
<li><a href="#GetSQS">GetSQS</a></li>
<li><a href="#GetTwitter">GetTwitter</a></li>
<li><a href="#HandleHttpRequest">HandleHttpRequest</a></li>
<li><a href="#HandleHttpResponse">HandleHttpResponse</a></li>
<li><a href="#HashAttribute">HashAttribute</a></li>
<li><a href="#HashContent">HashContent</a></li>
<li><a href="#IdentifyMimeType">IdentifyMimeType</a></li>
<li><a href="#InvokeHTTP">InvokeHTTP</a></li>
<li><a href="#ListenHTTP">ListenHTTP</a></li>
<li><a href="#ListenSyslog">ListenSyslog</a></li>
<li><a href="#ListenUDP">ListenUDP</a></li>
<li><a href="#ListFile">ListFile</a></li>
<li><a href="#ListHDFS">ListHDFS</a></li>
<li><a href="#ListSFTP">ListSFTP</a></li>
<li><a href="#LogAttribute">LogAttribute</a></li>
<li><a href="#MergeContent">MergeContent</a></li>
<li><a href="#ModifyBytes">ModifyBytes</a></li>
<li><a href="#MonitorActivity">MonitorActivity</a></li>
<li><a href="#ParseSyslog">ParseSyslog</a></li>
<li><a href="#PostHTTP">PostHTTP</a></li>
<li><a href="#PutAzureEventHub">PutAzureEventHub</a></li>
<li><a href="#PutCouchbaseKey">PutCouchbaseKey</a></li>
<li><a href="#PutDistributedMapCache">PutDistributedMapCache</a></li>
<li><a href="#PutEmail">PutEmail</a></li>
<li><a href="#PutFile">PutFile</a></li>
<li><a href="#PutFTP">PutFTP</a></li>
<li><a href="#PutHBaseCell">PutHBaseCell</a></li>
<li><a href="#PutHBaseJSON">PutHBaseJSON</a></li>
<li><a href="#PutHDFS">PutHDFS</a></li>
<li><a href="#PutJMS">PutJMS</a></li>
<li><a href="#PutKafka">PutKafka</a></li>
<li><a href="#PutMongo">PutMongo</a></li>
<li><a href="#PutS3Object">PutS3Object</a></li>
<li><a href="#PutSFTP">PutSFTP</a></li>
<li><a href="#PutSNS">PutSNS</a></li>
<li><a href="#PutSolrContentStream">PutSolrContentStream</a></li>
<li><a href="#PutSQL">PutSQL</a></li>
<li><a href="#PutSQS">PutSQS</a></li>
<li><a href="#PutSyslog">PutSyslog</a></li>
<li><a href="#ReplaceText">ReplaceText</a></li>
<li><a href="#ReplaceTextWithMapping">ReplaceTextWithMapping</a></li>
<li><a href="#ResizeImage">ResizeImage</a></li>
<li><a href="#RouteHL7">RouteHL7</a></li>
<li><a href="#RouteOnAttribute">RouteOnAttribute</a></li>
<li><a href="#RouteOnContent">RouteOnContent</a></li>
<li><a href="#RouteText">RouteText</a></li>
<li><a href="#ScanAttribute">ScanAttribute</a></li>
<li><a href="#ScanContent">ScanContent</a></li>
<li><a href="#SegmentContent">SegmentContent</a></li>
<li><a href="#SplitAvro">SplitAvro</a></li>
<li><a href="#SplitContent">SplitContent</a></li>
<li><a href="#SplitJson">SplitJson</a></li>
<li><a href="#SplitText">SplitText</a></li>
<li><a href="#SplitXML">SplitXML</a></li>
<li><a href="#StoreInKiteDataset">StoreInKiteDataset</a></li>
<li><a href="#TailFile">TailFile</a></li>
<li><a href="#TransformXML">TransformXML</a></li>
<li><a href="#UnpackContent">UnpackContent</a></li>
<li><a href="#UpdateAttribute">UpdateAttribute</a></li>
<li><a href="#ValidateXML">ValidateXML</a></li>
<li><a href="#YandexTranslate">YandexTranslate</a></li>
</ul>


<h3><a name="AttributesToJSON"></a>AttributesToJSON</h3>

<p>Generates a JSON representation of the input FlowFile Attributes. The resulting JSON can be written to either a new Attribute &lsquo;JSONAttributes&rsquo; or written to the FlowFile as content.</p>

<h3><a name="Base64EncodeContent"></a>Base64EncodeContent</h3>

<p>This processor base64 encodes FlowFile content, or decodes FlowFile content from base64.</p>

<h3><a name="CompressContent"></a>CompressContent</h3>

<p>This processor compresses or decompresses the contents of FlowFiles using a user-specified compression algorithm and updates the mime.type attribute as appropriate</p>

<h3><a name="ControlRate"></a>ControlRate</h3>

<p>This processor controls the rate at which data is transferred to follow-on processors.</p>

<h3><a name="ConvertAvroSchema"></a></h3>

<p>Convert records from one Avro schema to another, including support for flattening and simple type conversions.</p>

<p>This processor is used to convert data between two Avro formats, such as those coming from the ConvertCSVToAvro or ConvertJSONToAvro processors. The input and output content of the flow files should be Avro data files. The processor includes support for the following basic type conversions:</p>

<p>Anything to String, using the data&rsquo;s default String representation
String types to numeric types int, long, double, and float
Conversion to and from optional Avro types
In addition, fields can be renamed or unpacked from a record type by using the dynamic properties.</p>

<h3><a name ="ConvertAvroToJSON"></a>ConvertAvroToJSON</h3>

<p>Converts a Binary Avro record into a JSON object. This processor provides a direct mapping of an Avro field to a JSON field, such that the resulting JSON will have the same hierarchical structure as the Avro document. Note that the Avro schema information will be lost, as this is not a translation from binary Avro to JSON formatted Avro. The output JSON is encoded the UTF-8 encoding. If an incoming FlowFile contains a stream of multiple Avro records, the resultant FlowFile will contain a JSON Array containing all of the Avro records.</p>

<h3><a name="ConvertCharacterSet"></a>ConvertCharacterSet</h3>

<p>This processor converts a FlowFile&rsquo;s content from one character set to another.</p>

<h3><a name="ConvertCSVToAvro"></a>ConvertCSVToAvro</h3>

<p>Converts CSV files to Avro according to an Avro Schema</p>

<h3><a name="ConvertCSVToJSON"></a>ConvertCSVToJSON</h3>

<p>Converts JSON files to Avro according to an Avro Schema</p>

<h3><a name="ConvertCSVToSQL"></a>ConvertCSVToSQL</h3>

<p>Converts JSON files to Avro according to an Avro Schema
Converts a JSON-formatted FlowFile into an UPDATE or INSERT SQL statement. The incoming FlowFile is expected to be &ldquo;flat&rdquo; JSON message, meaning that it consists of a single JSON element and each field maps to a simple type. If a field maps to a JSON object, that JSON object will be interpreted as Text. If the input is an array of JSON elements, each element in the array is output as a separate FlowFile to the &lsquo;sql&rsquo; relationship. Upon successful conversion, the original FlowFile is routed to the &lsquo;original&rsquo; relationship and the SQL is routed to the &lsquo;sql&rsquo; relationship.</p>

<h3><a name="CreateHadoopSequenceFile"></a>CreateHadoopSequenceFile</h3>

<p>This processor is used to create a Hadoop Sequence File, which essentially is a file of key/value pairs. The key will be a file name and the value will be the flow file content. The processor will take either a merged (a.k.a. packaged) flow file or a singular flow file. Historically, this processor handled the merging by type and size or time prior to creating a SequenceFile output; it no longer does this. If creating a SequenceFile that contains multiple files of the same type is desired, precede this processor with a RouteOnAttribute processor to segregate files of the same type and follow that with a MergeContent processor to bundle up files. If the type of files is not important, just use the MergeContent processor. When using the MergeContent processor, the following Merge Formats are supported by this processor:</p>

<p>TAR
ZIP
FlowFileStream v3
The created SequenceFile is named the same as the incoming FlowFile with the suffix &lsquo;.sf&rsquo;. For incoming FlowFiles that are bundled, the keys in the SequenceFile are the individual file names, the values are the contents of each file.
NOTE: The value portion of a key/value pair is loaded into memory. While there is a max size limit of 2GB, this could cause memory issues if there are too many concurrent tasks and the flow file sizes are large.</p>

<h3><a name="DeleteS3Object"></a>DeleteS3Object</h3>

<p>Deletes FlowFiles on an Amazon S3 Bucket. If attempting to delete a file that does not exist, FlowFile is routed to success.</p>

<h3><a name="DeleteSQS"></a>DeleteSQS</h3>

<p>Deletes a message from an Amazon Simple Queuing Service Queue</p>

<h3><a name="DetectDuplicate"></a>DetectDuplicate</h3>

<p>This processor detects duplicate data by examining flow file attributes, thus allowing the user to configure what it means for two FlowFiles to be considered &ldquo;duplicates&rdquo;. This processor does not read the contents of a flow file, and is typically preceded by another processor which computes a value based on the flow file content and adds that value to the flow file&rsquo;s attributes; e.g. HashContent. Because this Processor needs to be able to work within a NiFi cluster, it makes use of a distributed cache service to determine whether or not the data has been seen previously.</p>

<p>If the processor is to be run on a standalone instance of NiFi, that instance should have both a DistributedMapCacheClient and a DistributedMapCacheServer configured in its controller-services.xml file.</p>

<h3><a name="DistributeLoad"></a>DistributeLoad</h3>

<p>This processor distributes FlowFiles to downstream processors based on a distribution strategy. The user may select the strategy &ldquo;round robin&rdquo;, the strategy &ldquo;next available&rdquo;, or &ldquo;load distribution service&rdquo;. If using the round robin strategy, the default is to assign each destination (i.e., relationship) a weighting of 1 (evenly distributed). However, the user may add optional properties to change this weighting. When adding a property, the name must be a positive integer between 1 and the number of relationships (inclusive). For example, if Number of Relationships has a value of 8 and a property is added with the name 5 and the value 10, then relationship 5 (among the 8) will receive 10 FlowFiles in each iteration instead of 1. All other relationships will receive 1 FlowFile in each iteration.</p>

<h3><a name="DuplicateFlowFile"></a>DuplicateFlowFile</h3>

<p>Intended for load testing, this processor will create the configured number of copies of each incoming FlowFile</p>

<h3><a name="EncryptContent"></a>EncryptContent</h3>

<p>Encrypts or Decrypts a FlowFile using either symmetric encryption with a password and randomly generated salt, or asymmetric encryption using a public and secret key.</p>

<h3><a name="EvaluateJsonPath"></a>EvaluateJsonPath</h3>

<p>Evaluates one or more JsonPath expressions against the content of a FlowFile. The results of those expressions are assigned to FlowFile Attributes or are written to the content of the FlowFile itself, depending on configuration of the Processor. JsonPaths are entered by adding user-defined properties; the name of the property maps to the Attribute Name into which the result will be placed (if the Destination is flowfile-attribute; otherwise, the property name is ignored). The value of the property must be a valid JsonPath expression. If the JsonPath evaluates to a JSON array or JSON object and the Return Type is set to &lsquo;scalar&rsquo; the FlowFile will be unmodified and will be routed to failure. A Return Type of JSON can return scalar values if the provided JsonPath evaluates to the specified value and will be routed as a match. If Destination is &lsquo;flowfile-content&rsquo; and the JsonPath does not evaluate to a defined path, the FlowFile will be routed to &lsquo;unmatched&rsquo; without having its contents modified. If Destination is flowfile-attribute and the expression matches nothing, attributes will be created with empty strings as the value, and the FlowFile will always be routed to &lsquo;matched&rsquo;.</p>

<h3><a name="EvaluateRegularExpression"></a>EvaluateRegularExpression</h3>

<p>WARNING: This has been deprecated and will be removed in 0.2.0. Use ExtractText instead.</p>

<h3><a name="EvaluateXPath"></a>EvaluateXPath</h3>

<p>This processor evaluates one or more XPaths against the content of a FlowFile. The results of those XPaths are assigned to FlowFile Attributes or are written to the content of the FlowFile itself, depending on configuration of the Processor. XPaths are entered by adding user-defined properties; the name of the property maps to the Attribute Name into which the result will be placed (if the Destination is flowfile-attribute; otherwise, the property name is ignored). The value of the property must be a valid XPath expression. If the XPath evaluates to more than one node and the Return Type is set to &lsquo;nodeset&rsquo; (either directly, or via &lsquo;auto-detect&rsquo; with a Destination of &lsquo;flowfile-content&rsquo;), the FlowFile will be unmodified and will be routed to failure. If the XPath does not evaluate to a Node, the FlowFile will be routed to &lsquo;unmatched&rsquo; without having its contents modified. If Destination is flowfile-attribute and the expression matches nothing, attributes will be created with empty strings as the value, and the FlowFile will always be routed to &lsquo;matched&rsquo;</p>

<h3><a name="EvaluateXQuery"></a>EvaluateXQuery</h3>

<p>This processor evaluates one or more XQueries against the content of a FlowFile. The results of those XQueries are assigned to FlowFile Attributes or are written to the content of the FlowFile itself, depending on configuration of the Processor. XQueries are entered by adding user-defined properties; the name of the property maps to the Attribute Name into which the result will be placed (if the Destination is &lsquo;flowfile-attribute&rsquo;; otherwise, the property name is ignored). The value of the property must be a valid XQuery. If the XQuery returns more than one result, new attributes or FlowFiles (for Destinations of &lsquo;flowfile-attribute&rsquo; or &lsquo;flowfile-content&rsquo; respectively) will be created for each result (attributes will have a &lsquo;.n&rsquo; one-up number appended to the specified attribute name). If any provided XQuery returns a result, the FlowFile(s) will be routed to &lsquo;matched&rsquo;. If no provided XQuery returns a result, the FlowFile will be routed to &lsquo;unmatched&rsquo;. If the Destination is &lsquo;flowfile-attribute&rsquo; and the XQueries matche nothing, no attributes will be applied to the FlowFile.</p>

<h3><a name="ExecuteFlumeSink"></a>ExecuteFlumeSink</h3>

<p>This processor executes a Flume sink. Each input FlowFile is converted into a Flume Event for processing by the sink.</p>

<h3><a name="ExecuteFlumeSource"></a>ExecuteFlumeSource</h3>

<p>Execute a Flume source. Each Flume Event is sent to the success relationship as a FlowFile</p>

<h3><a name="ExecuteProcess"></a>ExecuteProcess</h3>

<p>Runs an operating system command specified by the user and writes the output of that command to a FlowFile. If the command is expected to be long-running, the Processor can output the partial data on a specified interval. When this option is used, the output is expected to be in textual format, as it typically does not make sense to split binary data on arbitrary time-based intervals.</p>

<h3><a name="ExecuteSQL"></a>ExecuteSQL</h3>

<p>Execute provided SQL select query. Query result will be converted to Avro format. Streaming is used so arbitrarily large result sets are supported</p>

<h3><a name="ExecuteStreamCommand"></a>ExecuteStreamCommand</h3>

<p>This processor executes an external command on the contents of a FlowFile, and creates a new FlowFile with the results of the command.</p>

<h3><a name="ExtractAvroMetadata"></a>ExtractAvroMetadata</h3>

<p>Extracts metadata from the header of an Avro datafile.</p>

<h3><a name="ExtractHL7Attributes"></a>ExtractHL7Attributes</h3>

<p>Extracts information from an HL7 (Health Level 7) formatted FlowFile and adds the information as FlowFile Attributes. The attributes are named as <Segment Name> <dot> <Field Index>. If the segment is repeating, the naming will be <Segment Name> <underscore> <Segment Index> <dot> <Field Index>. For example, we may have an attribute named &ldquo;MHS.12&rdquo; with a value of &ldquo;2.1&rdquo; and an attribute named &ldquo;OBX_11.3&rdquo; with a value of &ldquo;93000<sup>CPT4</sup>&rdquo;.</p>

<h3><a name="ExtractImageMetadata"></a>ExtractImageMetadata</h3>

<p>Extract the image metadata from flowfiles containing images. This processor relies on this metadata extractor library <a href="https://github.com/drewnoakes/metadata-extractor.">https://github.com/drewnoakes/metadata-extractor.</a> It extracts a long list of metadata types including but not limited to EXIF, IPTC, XMP and Photoshop fields. For the full list visit the library&rsquo;s website.NOTE: The library being used loads the images into memory so extremely large images may cause problems</p>

<h3><a name="ExtractText"></a>ExtractText</h3>

<p>Evaluates one or more Regular Expressions against the content of a FlowFile. The results of those Regular Expressions are assigned to FlowFile Attributes. Regular Expressions are entered by adding user-defined properties; the name of the property maps to the Attribute Name into which the result will be placed. The first capture group, if any found, will be placed into that attribute name.But all capture groups, including the matching string sequence itself will also be provided at that attribute name with an index value provided.The value of the property must be a valid Regular Expressions with one or more capturing groups. If the Regular Expression matches more than once, only the first match will be used. If any provided Regular Expression matches, the FlowFile(s) will be routed to &lsquo;matched&rsquo;. If no provided Regular Expression matches, the FlowFile will be routed to &lsquo;unmatched&rsquo; and no attributes will be applied to the FlowFile.</p>

<h3><a name="FetchFile"></a>FetchFile</h3>

<p>Reads the contents of a file from disk and streams it into the contents of an incoming FlowFile. Once this is done, the file is optionally moved elsewhere or deleted to help keep the file system organized.</p>

<h3><a name="FetchHDFS"></a>FetchHDFS</h3>

<p>Retrieves a file from HDFS. The content of the incoming FlowFile is replaced by the content of the file in HDFS. The file in HDFS is left intact without any changes being made to it.</p>

<h3><a name="FetchS3Object"></a>FetchS3Object</h3>

<p>Retrieves the contents of an S3 Object and writes it to the content of a FlowFile</p>

<h3><a name="FetchSFTP"></a>FetchSFTP</h3>

<p>Fetches the content of a file from a remote SFTP server and overwrites the contents of an incoming FlowFile with the content of the remote file.</p>

<h3><a name="GenerateFlowFile"></a>GenerateFlowFile</h3>

<p>This processor creates FlowFiles of random data to be used for load testing purposes.</p>

<h3><a name="GeoEnrichIP"></a>GeoEnrichIP</h3>

<p>Looks up geolocation information for an IP address and adds the geo information to FlowFile attributes. The geo data is provided as a MaxMind database. The attribute that contains the IP address to lookup is provided by the &lsquo;IP Address Attribute&rsquo; property. If the name of the attribute provided is &lsquo;X&rsquo;, then the the attributes added by enrichment will take the form X.geo.<fieldName></p>

<h3><a name="GetAzureEventHub"></a>GetAzureEventHub</h3>

<p>Receives messages from a Microsoft Azure Event Hub, writing the contents of the Azure message to the content of the FlowFile</p>

<h3><a name="GetCouchbaseKey"></a>GetCouchbaseKey</h3>

<p>Get a document from Couchbase Server via Key/Value access. The ID of the document to fetch may be supplied by setting the <Document Id> property. NOTE: if the Document Id property is not set, the contents of the FlowFile will be read to determine the Document Id, which means that the contents of the entire FlowFile will be buffered in memory.</p>

<h3><a name="GetFile"></a>GetFile</h3>

<p>This processor obtains FlowFiles from a local directory. NiFi will need at least read permissions on the files it will pull otherwise it will ignore them.</p>

<h3><a name="GetFTP"></a>GetFTP</h3>

<p>This processor fetches files from an FTP server and creates FlowFiles from them.</p>

<h3><a name="GetHBase"></a>GetHBase</h3>

<p>This Processor polls HBase for any records in the specified table. The processor keeps track of the timestamp of the cells that it receives, so that as new records are pushed to HBase, they will automatically be pulled. Each record is output in JSON format, as {&ldquo;row&rdquo;: &ldquo;<row key>&rdquo;, &ldquo;cells&rdquo;: { &ldquo;<column 1 family>:<column 1 qualifier>&rdquo;: &ldquo;<cell 1 value>&rdquo;, &ldquo;<column 2 family>:<column 2 qualifier>&rdquo;: &ldquo;<cell 2 value>&rdquo;, &hellip; }}. For each record received, a Provenance RECEIVE event is emitted with the format hbase://<table name>/<row key>, where <row key> is the UTF-8 encoded value of the row&rsquo;s key.</p>

<h3><a name="GetHDFS"></a>GetHDFS</h3>

<p>Fetch files from Hadoop Distributed File System (HDFS) into FlowFiles. This Processor will delete the file from HDFS after fetching it.</p>

<h3><a name="GetHDFSSequenceFile"></a>GetHDFSSequenceFile</h3>

<p>Fetch sequence files from Hadoop Distributed File System (HDFS) into FlowFiles</p>

<h3><a name="GetHTTP"></a>GetHTTP</h3>

<p>This processor fetches files via HTTP and creates FlowFiles from them.</p>

<h3><a name="GetJMSQueue"></a>GetJMSQueue</h3>

<p>This processor pulls messages from a JMS Queue, creating a FlowFile for each JMS message or bundle of messages, as configured.</p>

<h3><a name="GetJMSTopic"></a>GetJMSTopic</h3>

<p>This processor pulls messages from a JMS Topic, creating a FlowFile for each JMS message or bundle of messages, as configured.</p>

<h3><a name="GetKafka"></a>GetKafka</h3>

<p>This Processors polls Apache Kafka for data. When a message is received from Kafka, this Processor emits a FlowFile where the content of the FlowFile is the value of the Kafka message. If the message has a key associated with it, an attribute named kafka.key will be added to the FlowFile, with the value being the UTF-8 Encoded value of the Message&rsquo;s Key.</p>

<p>Kafka supports the notion of a Consumer Group when pulling messages in order to provide scalability while still offering a publish-subscribe interface. Each Consumer Group must have a unique identifier. The Consumer Group identifier that is used by NiFi is the UUID of the Processor. This means that all of the nodes within a cluster will use the same Consumer Group Identifier so that they do not receive duplicate data but multiple GetKafka Processors can be used to pull from multiple Topics, as each Processor will receive a different Processor UUID and therefore a different Consumer Group Identifier.</p>

<h3><a name="GetMongo"></a>GetMongo</h3>

<p>Creates FlowFiles from documents in MongoDB</p>

<h3><a name="GetSFTP"></a>GetSFTP</h3>

<p>This processor pulls files from an SFTP server and creates FlowFiles to encapsulate them.</p>

<h3><a name="GetSolr"></a>GetSolr</h3>

<p>Queries Solr and outputs the results as a FlowFile</p>

<h3><a name="GetSQS"></a>GetSQS</h3>

<p>Fetches messages from an Amazon Simple Queuing Service Queue</p>

<h3><a name="GetTwitter"></a>GetTwitter</h3>

<p>Pulls status changes from Twitter&rsquo;s streaming API</p>

<h3><a name="HandleHttpRequest"></a>HandleHttpRequest</h3>

<p>This processor starts an HTTP server and creates a FlowFile for each HTTP Request that it receives. The Processor leaves the HTTP Connection open and is intended to be used in conjunction with a HandleHttpResponse Processor.</p>

<p>The pairing of this Processor with a HandleHttpResponse Processor provides the ability to use NiFi to visually construct a web server that can carry out any functionality that is available through the existing Processors. For example, one could construct a Web-based front end to an SFTP Server by constructing a flow such as:</p>

<p>HandleHttpRequest -> PutSFTP -> HandleHttpResponse</p>

<p>The HandleHttpRequest Processor provides several Properties to configure which methods are supported, the paths that are supported, and SSL configuration. The FlowFiles that are generated by this Processor have the following attributes added to them, providing powerful routing capabilities and traceability of all data.</p>

<h3><a name="HandleHttpResponse"></a>HandleHttpResponse</h3>

<p>This processor responds to an HTTP request that was received by the HandleHttpRequest Processor.</p>

<p>The pairing of this Processor with a HandleHttpRequest Processor provides the ability to use NiFi to visually construct a web server that can carry out any functionality that is available through the existing Processors. For example, one could construct a Web-based front end to an SFTP Server by constructing a flow such as:</p>

<p>HandleHttpRequest -> PutSFTP -> HandleHttpResponse</p>

<p>This Processor must be configured with the same <HTTP Context Map> service as the corresponding HandleHttpRequest Processor. Otherwise, all FlowFiles will be routed to the &lsquo;failure&rsquo; relationship.</p>

<p>All FlowFiles must have an attribute named http.context.identifier. The value of this attribute is used to lookup the HTTP Response so that the proper message can be sent back to the requestor. If this attribute is missing, the FlowFile will be routed to &lsquo;failure.&rsquo;</p>

<h3><a name="HashAttribute"></a>HashAttribute</h3>

<p>This processor hashes together the key/value pairs of several FlowFile attributes and adds the hash as a new attribute. The user may add optional properties such that the name of each property is the name of a FlowFile attribute to consider and the value of the property is a regular expression that, if matched by the attribute value, causes that attribute to be used as part of the hash. If the regular expression contains a capturing group, only the value of the capturing group is used.</p>

<h3><a name="HashContent"></a>HashContent</h3>

<p>This processor calculates a hash value for the content of a FlowFile and puts the hash value on the FlowFile as an attribute whose name is determined by the Hash Attribute Name property.</p>

<h3><a name="IdentifyMimeType"></a>IdentifyMimeType</h3>

<p>This processor attempts to identify the MIME Type used for a FlowFile. If the MIME Type can be identified, an attribute with the name &lsquo;mime.type&rsquo; is added with the value being the MIME Type. If the MIME Type cannot be determined, the value will be set to &lsquo;application/octet-stream&rsquo;. In addition, the attribute mime.extension will be set if a common file extension for the MIME Type is known.</p>

<p>The following MIME Types are detected:</p>

<ul>
<li>application/gzip</li>
<li>application/bzip2</li>
<li>application/flowfile-v3</li>
<li>application/flowfile-v1 (requires Identify TAR be set to true)</li>
<li>application/xml</li>
<li>video/mp4</li>
<li>video/x-m4v</li>
<li>video/mp4a-latm</li>
<li>video/quicktime</li>
<li>video/mpeg</li>
<li>audio/wav</li>
<li>audio/mp3</li>
<li>image/bmp</li>
<li>image/png</li>
<li>image/jpg</li>
<li>image/gif</li>
<li>image/tif</li>
<li>application/vnd.ms-works</li>
<li>application/msexcel</li>
<li>application/mspowerpoint</li>
<li>application/msaccess</li>
<li>application/x-ms-wmv</li>
<li>application/pdf</li>
<li>application/x-rpm</li>
<li>application/tar</li>
<li>application/x-7z-compressed</li>
<li>application/java-archive</li>
<li>application/zip</li>
<li>application/x-lzh</li>
</ul>


<h3><a name="InvokeHTTP"></a>InvokeHTTP</h3>

<p>Making requests to remote HTTP servers. Supporting common HTTP methods. Storing results as new flowfiles upon success. Routing to failure on error.</p>

<p>An HTTP client processor that converts FlowFile attributes to HTTP headers with configurable HTTP method, URL, etc.</p>

<h3><a name="ListenHTTP"></a>ListenHTTP</h3>

<p>This processor starts an HTTP service that is used to receive FlowFiles from remote sources. The URL of the service is <a href="http://">http://</a>{hostname}:{port}/contentListener.</p>

<h3><a name="ListenSyslog"></a>ListenSyslog</h3>

<p>Listens for Syslog messages being sent to a given port over TCP or UDP. Incoming messages are checked against regular expressions for RFC5424 and RFC3164 formatted messages. The format of each message is: (<PRIORITY>)(VERSION )(TIMESTAMP) (HOSTNAME) (BODY) where version is optional. The timestamp can be an RFC5424 timestamp with a format of &ldquo;yyyy-MM-dd&rsquo;T&#8217;HH:mm:ss.SZ&rdquo; or &ldquo;yyyy-MM-dd&rsquo;T&#8217;HH:mm:ss.S+hh:mm&rdquo;, or it can be an RFC3164 timestamp with a format of &ldquo;MMM d HH:mm:ss&rdquo;. If an incoming messages matches one of these patterns, the message will be parsed and the individual pieces will be placed in FlowFile attributes, with the original message in the content of the FlowFile. If an incoming message does not match one of these patterns it will not be parsed and the syslog.valid attribute will be set to false with the original message in the content of the FlowFile. Valid messages will be transferred on the success relationship, and invalid messages will be transferred on the invalid relationship.</p>

<h3><a name="ListenUDP"></a>ListenUDP</h3>

<p>This processor listens for Datagram Packets on a given port and concatenates the contents of those packets together generating flow files</p>

<h3><a name="ListFile"></a>ListFile</h3>

<p>Retrieves a listing of files from the local filesystem. For each file that is listed, creates a FlowFile that represents the file so that it can be fetched in conjunction with ListFile. This Processor is designed to run on Primary Node only in a cluster. If the primary node changes, the new Primary Node will pick up where the previous node left off without duplicating all of the data. Unlike GetFile, this Processor does not delete any data from the local filesystem.</p>

<h3><a name="ListHDFS"></a>ListHDFS</h3>

<p>This processor retrieves a listing of files from HDFS. For each file that is listed in HDFS, creates a FlowFile that represents the HDFS file so that it can be fetched in conjunction with ListHDFS. This Processor is designed to run on Primary Node only in a cluster. If the primary node changes, the new Primary Node will pick up where the previous node left off without duplicating all of the data. Unlike GetHDFS, this Processor does not delete any data from HDFS.</p>

<h3><a name="ListSFTP"></a>ListSFTP</h3>

<p>Performs a listing of the files residing on an SFTP server. For each file that is found on the remote server, a new FlowFile will be created with the filename attribute set to the name of the file on the remote server. This can then be used in conjunction with FetchSFTP in order to fetch those files.</p>

<h3><a name="LogAttribute"></a>LogAttribute</h3>

<p>This processor reads the attributes on incoming FlowFiles and prints those attributes and their values to the log at the logging level specified by the user.</p>

<h3><a name="MergeContent"></a>MergeContent</h3>

<p>This processor merges a group of FlowFiles together into a &ldquo;Bundle&rdquo; based on a user-defined strategy and packages them into a single FlowFile. It is recommended that the processor be configured with only a single incoming connection, as groups of FlowFiles will not be created from FlowFiles in different connections. This processor updates the mime.type attribute as appropriate. After files have been merged by this processor, they can be unpackaged later using the UnpackContent processor.</p>

<h3><a name="ModifyBytes"></a>ModifyBytes</h3>

<p>This processor updates the content of a FlowFile by removing bytes from start or end of a file.</p>

<h3><a name="MonitorActivity"></a>MonitorActivity</h3>

<p>This processor monitors the flow for activity and sends out an indicator when the flow has not had any data for some specified amount of time and again when the flow&rsquo;s activity is restored.</p>

<h3><a name="ParseSyslog"></a>ParseSyslog</h3>

<p>Parses the contents of a Syslog message and adds attributes to the FlowFile for each of the parts of the Syslog message</p>

<h3><a name="PostHTTP"></a>PostHTTP</h3>

<p>This processor performs an HTTP post with the content of each incoming FlowFile.</p>

<h3><a name="PutAzureEventHub"></a>PutAzureEventHub</h3>

<p>Sends the contents of a FlowFile to a Windows Azure Event Hub. Note: the content of the FlowFile will be buffered into memory before being sent, so care should be taken to avoid sending FlowFiles to this Processor that exceed the amount of Java Heap Space available.</p>

<h3><a name="PutCouchbaseKey"></a>PutCouchbaseKey</h3>

<p>Put a document to Couchbase Server via Key/Value access.</p>

<h3><a name="PutDistributedMapCache"></a>PutDistributedMapCache</h3>

<p>Gets the content of a FlowFile and puts it to a distributed map cache, using a cache key computed from FlowFile attributes. If the cache already contains the entry and the cache update strategy is &lsquo;keep original&rsquo; the entry is not replaced.&#8217;</p>

<h3><a name="PutEmail"></a>PutEmail</h3>

<p>This processor sends an e-mail to configured recipients for each incoming FlowFile.</p>

<h3><a name="PutFile"></a>PutFile</h3>

<p>This processor writes FlowFiles to the local file system.</p>

<h3><a name="PutFTP"></a>PutFTP</h3>

<p>This processor sends FlowFiles via FTP to an FTP server.</p>

<h3><a name="PutHBaseCell"></a>PutHBaseCell</h3>

<p>Adds the Contents of a FlowFile to HBase as the value of a single cell</p>

<h3><a name="PutHBaseJSON"></a>PutHBaseJSON</h3>

<p>Adds rows to HBase based on the contents of incoming JSON documents. Each FlowFile must contain a single UTF-8 encoded JSON document, and any FlowFiles where the root element is not a single document will be routed to failure. Each JSON field name and value will become a column qualifier and value of the HBase row. Any fields with a null value will be skipped, and fields with a complex value will be handled according to the Complex Field Strategy. The row id can be specified either directly on the processor through the Row Identifier property, or can be extracted from the JSON document by specifying the Row Identifier Field Name property. This processor will hold the contents of all FlowFiles for the given batch in memory at one time.</p>

<h3><a name="PutHDFS"></a>PutHDFS</h3>

<p>This processor writes FlowFiles to an HDFS cluster. It will create directories in which to store files as needed based on the Directory property.</p>

<p>When files are written to HDFS, the file&rsquo;s owner is the user identity of the NiFi process, the file&rsquo;s group is the group of the parent directory, and the read/write/execute permissions use the default umask. The owner can be overridden using the Remote Owner property, the group can be overridden using the Remote Group property, and the read/write/execute permissions can be overridden using the Permissions umask property.</p>

<p>NOTE: This processor can change owner or group only if the user identity of the NiFi process has super user privilege in HDFS to do so.</p>

<p>NOTE: The Permissions umask property cannot add execute permissions to regular files.</p>

<h3><a name="PutJMS"></a>PutJMS</h3>

<p>This processor creates a JMS message from the contents of a FlowFile and sends the message to a JMS server.</p>

<h3><a name="PutKafka"></a>PutKafka</h3>

<p>This Processors puts the contents of a FlowFile to a Topic in Apache Kafka. The full contents of a FlowFile becomes the contents of a single message in Kafka. This message is optionally assigned a key by using the <Kafka Key> Property.</p>

<p>The Processor allows the user to configure an optional Message Delimiter that can be used to send many messages per FlowFile. For example, a \n could be used to indicate that the contents of the FlowFile should be used to send one message per line of text. If the property is not set, the entire contents of the FlowFile will be sent as a single message. When using the delimiter, if some messages are successfully sent but other messages fail to send, the FlowFile will be FORKed into two child FlowFiles, with the successfully sent messages being routed to &lsquo;success&rsquo; and the messages that could not be sent going to &lsquo;failure&rsquo;.</p>

<h3><a name="PutMongo"></a>PutMongo</h3>

<p>Writes the contents of a FlowFile to MongoDB</p>

<h3><a name="PutS3Object"></a>PutS3Object</h3>

<p>Puts FlowFiles to an Amazon S3 Bucket</p>

<h3><a name="PutSFTP"></a>PutSFTP</h3>

<p>This processor sends FlowFiles via SFTP to an SFTP server.</p>

<h3><a name="PutSNS"></a>PutSNS</h3>

<p>Sends the content of a FlowFile as a notification to the Amazon Simple Notification Service</p>

<h3><a name="PutSolrContentStream"></a>PutSolrContentStream</h3>

<p>This processor streams the contents of a FlowFile to an Apache Solr update handler. Any properties added to this processor by the user are passed to Solr on the update request. If a parameter must be sent multiple times with different values, properties can follow a naming convention: name.number, where name is the parameter name and number is a unique number. Repeating parameters will be sorted by their property name.</p>

<p>Example: To specify multiple &lsquo;f&rsquo; parameters for indexing custom json, the following properties can be defined:</p>

<ul>
<li>split: /exams</li>
<li>f.1: first:/first</li>
<li>f.2: last:/last</li>
<li>f.3: grade:/grade
This will result in sending the following url to Solr:
split=/exams&amp;f=first:/first&amp;f=last:/last&amp;f=grade:/grade</li>
</ul>


<h3><a name="PutSQL"></a>PutSQL</h3>

<p>Executes a SQL UPDATE or INSERT command. The content of an incoming FlowFile is expected to be the SQL command to execute. The SQL command may use the ? to escape parameters. In this case, the parameters to use must exist as FlowFile attributes with the naming convention sql.args.N.type and sql.args.N.value, where N is a positive integer. The sql.args.N.type is expected to be a number indicating the JDBC Type. The content of the FlowFile is expected to be in UTF-8 format.</p>

<h3><a name="PutSQS"></a>PutSQS</h3>

<p>Publishes a message to an Amazon Simple Queuing Service Queue</p>

<h3><a name="PutSyslog"></a>PutSyslog</h3>

<p>Sends Syslog messages to a given host and port over TCP or UDP. Messages are constructed from the &ldquo;Message ___&rdquo; properties of the processor which can use expression language to generate messages from incoming FlowFiles. The properties are used to construct messages of the form: (<PRIORITY>)(VERSION )(TIMESTAMP) (HOSTNAME) (BODY) where version is optional. The constructed messages are checked against regular expressions for RFC5424 and RFC3164 formatted messages. The timestamp can be an RFC5424 timestamp with a format of &ldquo;yyyy-MM-dd&rsquo;T&#8217;HH:mm:ss.SZ&rdquo; or &ldquo;yyyy-MM-dd&rsquo;T&#8217;HH:mm:ss.S+hh:mm&rdquo;, or it can be an RFC3164 timestamp with a format of &ldquo;MMM d HH:mm:ss&rdquo;. If a message is constructed that does not form a valid Syslog message according to the above description, then it is routed to the invalid relationship. Valid messages are sent to the Syslog server and successes are routed to the success relationship, failures routed to the failure relationship.</p>

<h3><a name="ReplaceText"></a>ReplaceText</h3>

<p>This processor updates the content of a FlowFile by evaluating a regular expression (regex) against the content and replacing the section of content that matches the regular expression with an alternate, user-defined, value.</p>

<h3><a name="ReplaceTextWithMapping"></a>ReplaceTextWithMapping</h3>

<p>This processor updates the content of a FlowFile by evaluating a Regular Expression against it and replacing the section of the content that matches the Regular Expression with some alternate value provided in a mapping file.</p>

<h3><a name="ResizeImage"></a>ResizeImage</h3>

<p>Resizes an image to user-specified dimensions. This Processor uses the image codecs registered with the environment that NiFi is running in. By default, this includes JPEG, PNG, BMP, WBMP, and GIF images.</p>

<h3><a name="RouteHL7"></a>RouteHL7</h3>

<p>Routes incoming HL7 data according to user-defined queries. To add a query, add a new property to the processor. The name of the property will become a new relationship for the processor, and the value is an HL7 Query Language query. If a FlowFile matches the query, a copy of the FlowFile will be routed to the associated relationship.</p>

<h3><a name="RouteOnAttribute"></a>RouteOnAttribute</h3>

<p>This processor routes FlowFiles based on their attributes using the NiFi Expression Language. Users add properties with valid NiFi Expression Language Expressions as the values. Each Expression must return a value of type Boolean (true or false).</p>

<p>Example: The goal is to route all files with filenames that start with ABC down a certain path. Add a property with the following name and value:</p>

<ul>
<li>property name: ABC</li>
<li>property value: ${filename:startsWith(&lsquo;ABC&rsquo;)}
In this example, all files with filenames that start with ABC will follow the ABC relationship.</li>
</ul>


<h3><a name="RouteOnContent"></a>RouteOnContent</h3>

<p>This processor applies user-added regular expressions to the content of a FlowFile and routes a copy of the FlowFile to each destination whose regular expression matches. The user adds properties where the name is the relationship that the FlowFile should follow if it matches the regular expression, which is defined as the property&rsquo;s value. User-defined properties do support the NiFi Expression Language, but in such cases, the results are interpreted as literal values, not regular expressions.</p>

<h3><a name="RouteText"></a>RouteText</h3>

<p>Routes textual data based on a set of user-defined rules. Each line in an incoming FlowFile is compared against the values specified by user-defined Properties. The mechanism by which the text is compared to these user-defined properties is defined by the &lsquo;Matching Strategy&rsquo;. The data is then routed according to these rules, routing each line of the text individually.</p>

<h3><a name="ScanAttribute"></a>ScanAttribute</h3>

<p>This processor scans the specified attributes of FlowFiles, checking to see if any of their values are present within the specified dictionary of terms.</p>

<h3><a name="ScanContent"></a>ScanContent</h3>

<p>This processor scans the content of FlowFiles for terms that are found in a user-supplied dictionary file. If a term is matched, the UTF-8 encoded version of the term is added to the FlowFile using the matching.term attribute. This allows for follow-on processors to use the value of the matching.term attribute to make routing decisions and so forth.</p>

<h3><a name="SegmentContent"></a>SegmentContent</h3>

<p>This processor segments a FlowFile into multiple smaller segments on byte boundaries. Each segment is given attributes that can then be used by the MergeContent processor to reconstruct the original FlowFile.</p>

<h3><a name="SplitAvro"></a>SplitAvro</h3>

<p>Splits a binary encoded Avro datafile into smaller files based on the configured Output Size. The Output Strategy determines if the smaller files will be Avro datafiles, or bare Avro records with metadata in the FlowFile attributes. The output will always be binary encoded.</p>

<h3><a name="SplitContent"></a>SplitContent</h3>

<p>This processor splits incoming FlowFiles by a specified byte sequence.</p>

<h3><a name="SplitJson"></a>SplitJson</h3>

<p>This processor splits a JSON File into multiple, separate FlowFiles for an array element specified by a JsonPath expression. Each generated FlowFile is comprised of an element of the specified array and transferred to relationship &lsquo;split,&rsquo; with the original file transferred to the &lsquo;original&rsquo; relationship. If the specified JsonPath is not found or does not evaluate to an array element, the original file is routed to &lsquo;failure&rsquo; and no files are generated.</p>

<h3><a name="SplitText"></a>SplitText</h3>

<p>This processor splits a text file into multiple smaller text files on line boundaries, each having up to a configured number of lines.</p>

<h3><a name="SplitXML"></a>SplitXML</h3>

<p>This processor splits an XML file into multiple separate FlowFiles, each comprising a child or descendant of the original root element.</p>

<h3><a name="StoreInKiteDataset"></a>StoreInKiteDataset</h3>

<p>No description is given for this processor.</p>

<h3><a name="TailFile"></a>TailFile</h3>

<p>&ldquo;Tails&rdquo; a file, ingesting data from the file as it is written to the file. The file is expected to be textual. Data is ingested only when a new line is encountered (carriage return or new-line character or combination). If the file to tail is periodically &ldquo;rolled over&rdquo;, as is generally the case with log files, an optional Rolling Filename Pattern can be used to retrieve data from files that have rolled over, even if the rollover occurred while NiFi was not running (provided that the data still exists upon restart of NiFi). It is generally advisable to set the Run Schedule to a few seconds, rather than running with the default value of 0 secs, as this Processor will consume a lot of resources if scheduled very aggressively. At this time, this Processor does not support ingesting files that have been compressed when &lsquo;rolled over&rsquo;.</p>

<h3><a name="TransformXML"></a>TransformXML</h3>

<p>This processor transforms the contents of FlowFiles based on a user-specified XSLT stylesheet file. XSL versions 1.0 and 2.0 are supported.</p>

<h3><a name="UnpackContent"></a>UnpackContent</h3>

<p>This processor unpacks the content of FlowFiles that have been packaged with one of several different packaging formats, emitting one to many FlowFiles for each input FlowFile.</p>

<h3><a name="UpdateAttribute"></a>UpdateAttribute</h3>

<p>This processor updates the attributes of a FlowFile using properties or rules that are added by the user. There are two ways to use this processor to add or modify attributes. One way is the &ldquo;Basic Usage&rdquo;; this allows you to set default attribute changes that affect every FlowFile going through the processor. The second way is the &ldquo;Advanced Usage&rdquo;; this allows you to make conditional attribute changes that only affect a FlowFile if it meets certain conditions. It is possible to use both methods in the same processor at the same time.</p>

<h3><a name="ValidateXML"></a>ValidateXML</h3>

<p>This processor validates the contents of FlowFiles against a user-specified XML schema file.</p>

<h3><a name="YandexTranslate"></a>YandexTranslate</h3>

<p>Translates content and attributes from one language to another</p>

<p>If you have questions about a processor, I&rsquo;d encourage you to download the binaries and start up Apache Nifi.  If you really want more information, let me know and I&rsquo;ll try to compile a more complete post about each and every processor.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[What's in Nifi's first release: Nifi 0.0.1]]></title>
    <link href="http://www.nifi.rocks/whats-in-nifis-first-release-nifi-0-dot-0-1/"/>
    
    <updated>2015-02-04T21:54:57+00:00</updated>
    <id>http://www.nifi.rocks/whats-in-nifis-first-release-nifi-0-dot-0-1</id>
    
    <content type="html"><![CDATA[<p>Apache Nifi just had their first release, <a href="https://nifi.apache.org/download.html">0.0.1</a>.  It showed good movement forward with 75 bug fixes, 24 improvements, and 2 new features.  A list of <a href="https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12316020&amp;version=12329078">Release Notes</a> is on their Jira page.  With the release, it gives the users source downloads to start from, which is great, but lets look at the highlights of this release.</p>

<h2>Apache Nifi Release 0.0.1 Highlights</h2>

<ul>
<li>One of the biggest changes was the directory structure to allow parrallel maven builds.  This took the build time down from 20-30 minutes to 3-7 minutes. <a href="https://issues.apache.org/jira/browse/NIFI-169">Nifi Jira 169</a></li>
<li>The improvement of the assembly process also allowed for more stream lined packaging. <a href="https://issues.apache.org/jira/browse/NIFI-228">Nifi Jira 228</a></li>
</ul>


<p>Outside of the build process, most of the updates were cleaning up the code base to make it more developer friendly and fixing alot of small bugs;</p>

<ul>
<li>Updating libraries to their most current version</li>
<li>Adding documentation/users guides</li>
<li>Guarantee builds on varying OSes: OSX, Linux, Windows.</li>
</ul>


<p>I&rsquo;m pretty excited to see what&rsquo;s in the next release, but also excited that I don&rsquo;t have to build nifi to use it.  Release binaries are available on the <a href="https://nifi.apache.org/download.html">nifi website</a>.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Navigating Apache Nifi]]></title>
    <link href="http://www.nifi.rocks/navigating-apache-nifi/"/>
    
    <updated>2015-01-28T03:58:20+00:00</updated>
    <id>http://www.nifi.rocks/navigating-apache-nifi</id>
    
    <content type="html"><![CDATA[<p>The main user interface of Apache Nifi is their web ui.  This makes it much more enjoyable to use than a command line interface, but can still be hard to grasp quickly or know where certain things are when you first start using it.  To help reduce the learning curve, we are going through and breaking down the web ui through a video showing how-to navigate Apache Nifi.</p>

<p>Our main points will be the menu bar and building a data flow with some tips and tricks along the way.  The data flow will be based off of our previous post <a href="http://www.nifi.rocks/getting-started-with-apache-nifi/">Getting Started with Apache Nifi</a>.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/FgTGAWLC170" frameborder="0" allowfullscreen></iframe>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Getting Started with Apache Nifi]]></title>
    <link href="http://www.nifi.rocks/getting-started-with-apache-nifi/"/>
    
    <updated>2015-01-16T01:08:03+00:00</updated>
    <id>http://www.nifi.rocks/getting-started-with-apache-nifi</id>
    
    <content type="html"><![CDATA[<ul>
<li>Update April 8th 2015: The Vagrantfile has been updated to pull the release tag 0.0.2 for stability</li>
</ul>


<h1>Install options</h1>

<p><a href="https://nifi.apache.org">Apache NiFi</a> is currently in incubation and so does not have any releases, so to start we have to checkout the project and build the code base.  A users guide is avaialble on the <a href="https://nifi.apache.org/quickstart.html">nifi website</a> with requirements for building and running nifi, mainly java 7 and maven 3.0.5+.  OpendJDK will work but currently the unit tests will not pass.  A quick tldr; can be found below.</p>

<h2>Using Vagrant</h2>

<p>If you like to keep your project dependencies seperate like me, I&rsquo;ve created a <a href="https://gist.github.com/czobrisky/a1ed32d9429600f4e661#file-vagrantfile">Vagrantfile</a> that will get all dependencies and then build the project in the shared /vagrant/ folder.  After building it will start nifi and you can point your browser to localhost:8080/nifi/ and skip to <a href="#building-dataflow">Building a Simple Dataflow</a>.  The provisioning of the VM will take about 10-15 minutes depending on your hardware.</p>

<!-- more -->




<script src="https://gist.github.com/czobrisky/a1ed32d9429600f4e661.js"></script>


<p>If you want to build it for yourself it normally takes 2-6 minutes depending on your system, with parrallel builds enabled.
Clone from Apache Nifi git repo:</p>

<pre><code>git git clone http://git-wip-us.apache.org/repos/asf/nifi.git
cd nifi
</code></pre>

<p>Once you have the source, first have to build the nar-maven-plugin.</p>

<pre><code>cd nifi-nar-maven-plugin
mvn clean install
</code></pre>

<p>Now build the rest of the source from the root directory.</p>

<pre><code>cd ../nifi
mvn -T C2.0 clean install
</code></pre>

<p>NiFi recently updated their build process so it now supports parrallel building of components using the -T maven arg to speed up the build.</p>

<p>The last step is to build the assembly and unpack the created tar.gz.</p>

<pre><code>cp nifi-assembly/target/nifi-*-SNAPSHOT-bin.tar.gz ~/nifi-example/
tar -zxf nifi-*-SNAPSHOT-bin.tar.gz
</code></pre>

<p>After unpacking, cd into the directory and start NiFi in the background using the nifi.sh script in the bin directory.</p>

<pre><code>cd nifi-*-SNAPSHOT
bin/nifi.sh start
</code></pre>

<p>Now open a browser and point to localhost:8080/nifi to view the NiFi flow UI.</p>

<p><img src="http://www.nifi.rocks/images/getting-started/nifi-home.png"></p>

<h1><a name="building-dataflow"></a>Building your first Apache Nifi dataflow</h1>

<p>The homepage webpage for Apache NiFi is a grid with some options on the top of the page.  This is where you build your data flows, the configuration of each processor and the relationship between processors.  This is saved as a FlowFile and can be saved for later use or imported into another Apache NiFi instance.  As an example, we&rsquo;ll fetch an XML document from an RSS feed and then based on an attribute and move it to a predefined directory.</p>

<p>To start, drag the processor icon, <img src="http://www.nifi.rocks/images/getting-started/processor.png"> in the menu bar down to the canvas below.  Select the GetHTTP processor from the list, you can use the search bar on the right side of the Add Processor modal or the Tags on the left to filter the list.
<img src="http://www.nifi.rocks/images/getting-started/add-processor-highlight.png"></p>

<p>Right clicking on the processor brings up a dropdown that allows you to configure the processor along with a few other options.
<img class="right" src="http://www.nifi.rocks/images/getting-started/processor-dropdown.png"></p>

<p>From this selection a &ldquo;Configure Processor&rdquo; modal opens.  Most default settinsg are fine, you can change the name if you would like to &ldquo;Fetch from XKCD&rdquo;, but look through the tabs just to see what they contain.  Select the properties tab to configure the options of the processor.</p>

<p><img src="http://www.nifi.rocks/images/getting-started/configure-processor.png"></p>

<p>The URL we are going to grab a file from is <a href="http://xkcd.com">XKCD&rsquo;s</a> rss feed, <a href="http://xkcd.com/rss.xml">rss.xml</a>.  The GetHTTP procesor is simple to configure and just needs the URL property to be set to <a href="http://xkcd.com/rss.xml.">http://xkcd.com/rss.xml.</a>  Click on the value across from the URL property and enter <a href="http://xkcd.com/rss.xml.">http://xkcd.com/rss.xml.</a></p>

<p>Now drag down another processor, EvaluateXPath.  Under the properties for this processor, set the following property-value pairs:</p>

<ul>
<li>Destination   -   flowfile-attribute</li>
<li>Return Type   -   auto-detect</li>
</ul>


<p>Now add a new property as follows by clicking the New property symbol in the upper right side of the Configure Processor modal.</p>

<ul>
<li>pubDate   -   channel/item[2]/pubDate</li>
<li>title     -   channel/item[2]/title</li>
<li>link      -   channel/item[2]/link</li>
</ul>


<p><img src="http://www.nifi.rocks/images/getting-started/config-xpath.png"></p>

<p>After applying the changes, we can now connect the two processors we have.  Click the middle of the GetHTTP processor and then drag to the EvaluateXPath processor.  A new modal will appear to confirm the relationship and click ok.  After connecting the two. <img class="right" src="http://www.nifi.rocks/images/getting-started/connected-procs.png"></p>

<p>We are almost done, just two more PutFile processors to go.  Before we add the next two processors, we need to create two directories to put matched and unmatched files.  (This is really optional since the PutFile processor will create the directory by default if it does not exist, but it&rsquo;s easier to do in advance knowing the full path.)  If you used the Vagrantfile that I linked to earlier, these directories are already created for you, so you can skip this part.  If you did not, just create a directory called matched and unmatched and remember the full path.</p>

<p>Now add two PutFile Processors and change one name to matched, the other to unmatched.  Both PutFile processors will have auto terminated relationships for failure and success.  These are checked off on the Settings tab when configuring each processor. <img src="http://www.nifi.rocks/images/getting-started/auto-terminate-hg.png">  For the matched PutFile processor, change the directory property value to the directory you created earlier called matched, with the full path. If you are using the Vagrantfile, the directory is &ldquo;/vagrant/matched/&rdquo;.  For the unmatched PutFile processor, do the same thing for the unmatched directory you created, &ldquo;/vagrant/unmatched/&rdquo; if using the Vagrantfile.</p>

<p>Now wire the last few processors, EvaluateXPath and the two PutFile processors.  Make sure to connect the correct relationships from the EvaluateXPath for the matched and unmatched.  Lastly, wire the failure relationship for the EvaluateXPath back to itself by left clicking on the processor as you normally would to connect processors, pulling away and then back to the original processor and then select failure from the relationship modal.  This allows failures to retry on the processor they failed on, EvaluateXPath in this example.</p>

<p>Your final flow should look similar to this.</p>

<p><img src="http://www.nifi.rocks/images/getting-started/completed-flow.png"></p>

<p>All processors should be stopped and have a red square in their top left.  If they have an exclaimation mark in a yellow triangle, then there is an issue with the processor.  Hover of the yellow triangle to get more information.  (To see an example, remove one of the auto terminate relationships from a PutFile processor).</p>

<p>Now we can run our flow file and see what happens!  Run the flow by clicking the play button in the flow menu bar.</p>

<p><img src="http://www.nifi.rocks/images/getting-started/menu-bar-hg.png"></p>

<p>Make sure you don&rsquo;t have a processor selected or it will only start that one processor.  After running, it should pull down the rss.xml file, parse the attributes, and route it to the matched directory via the PutFile processor.  You can view the statistics on each processor from the flow, In and out, and Tasks/Time.  After it grabs the file, it should look similar to below.  You can check the directory you specified in the matched PutFile processor and the file should be there!</p>

<p><img src="http://www.nifi.rocks/images/getting-started/finished-flow.png"></p>

<p>I hope this simple walk through of creating a flow was helpful and you can start to see the power behind Apache Nifi.  In our next post we will show you how to create a custom processor and add it to your flow.</p>
]]></content>
    
  </entry>
  
</feed>
    </div>
  </div>
  <footer role="contentinfo"><p>
  Copyright &copy; 2016 -   <br/>
  <span class="credit">Powered by <a href="http://octopress.org">Octopress</a> + <a href="https://github.com/ioveracker/mnml">mnml</a>.
	  
  </span>
</p>

</footer>
  

<script type="text/javascript">
      var disqus_shortname = 'nifirocks';
      
        
        var disqus_script = 'count.js';
      
    (function () {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = 'https://' + disqus_shortname + '.disqus.com/' + disqus_script;
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    }());
</script>



<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) {return;}
  js = d.createElement(s); js.id = id; js.async = true;
  js.src = "//connect.facebook.net/en_US/all.js#appId=212934732101925&xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>



  <script type="text/javascript">
    (function() {
      var script = document.createElement('script'); script.type = 'text/javascript'; script.async = true;
      script.src = 'https://apis.google.com/js/plusone.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(script, s);
    })();
  </script>



  <script type="text/javascript">
    (function(){
      var twitterWidgets = document.createElement('script');
      twitterWidgets.type = 'text/javascript';
      twitterWidgets.async = true;
      twitterWidgets.src = 'http://platform.twitter.com/widgets.js';
      document.getElementsByTagName('head')[0].appendChild(twitterWidgets);
    })();
  </script>





</body>
</html>
